/* tslint:disable */
/* eslint-disable */
/*
staffing

The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.



Related Information:
- Administrator Guide: Setup Considerations: Job Changes

The version of the OpenAPI document: v6


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { JobData1bfa8925c50510000ae4479925510026 } from '../models';
// @ts-ignore
import { OrgChartView643e3a12629710000554e0338e670044 } from '../models';
// @ts-ignore
import { SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018 } from '../models';
// @ts-ignore
import { SupervisoryOrganizationsGetByIdResponse } from '../models';
// @ts-ignore
import { SupervisoryOrganizationsGetMembersResponse } from '../models';
// @ts-ignore
import { SupervisoryOrganizationsGetOrgChartResponse } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SupervisoryOrganizationsApi - axios parameter creator
 * @export
 */
export const SupervisoryOrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
         * @summary Retrieves a supervisory organization for the specified ID.
         * @param {boolean} [includeInactive] If true, this method returns the inactive organizations. Default is false.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (includeInactive?: boolean, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/supervisoryOrganizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (includeInactive !== undefined) {
                localVarQueryParameter['includeInactive'] = includeInactive;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/supervisoryOrganizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
         * @summary Retrieves a single supervisory organization instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getInstance', 'iD', iD)
            const localVarPath = `/supervisoryOrganizations/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/supervisoryOrganizations/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a member for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a single member instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getMember', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getMember', 'subresourceID', subresourceID)
            const localVarPath = `/supervisoryOrganizations/{ID}/members/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/supervisoryOrganizations/{ID}/members/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of members for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a collection of members for the specified supervisory organization ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getMembers', 'iD', iD)
            const localVarPath = `/supervisoryOrganizations/{ID}/members`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/supervisoryOrganizations/{ID}/members',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves information about an organization chart of the specified supervisory organization id.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgChart: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getOrgChart', 'iD', iD)
            const localVarPath = `/supervisoryOrganizations/{ID}/orgChart`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/supervisoryOrganizations/{ID}/orgChart',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a single organization chart instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgChart_1: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getOrgChart_1', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getOrgChart_1', 'subresourceID', subresourceID)
            const localVarPath = `/supervisoryOrganizations/{ID}/orgChart/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/supervisoryOrganizations/{ID}/orgChart/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupervisoryOrganizationsApi - functional programming interface
 * @export
 */
export const SupervisoryOrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SupervisoryOrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
         * @summary Retrieves a supervisory organization for the specified ID.
         * @param {SupervisoryOrganizationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: SupervisoryOrganizationsApiGetByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupervisoryOrganizationsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.includeInactive, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
         * @summary Retrieves a single supervisory organization instance.
         * @param {SupervisoryOrganizationsApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(requestParameters: SupervisoryOrganizationsApiGetInstanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a member for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a single member instance.
         * @param {SupervisoryOrganizationsApiGetMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMember(requestParameters: SupervisoryOrganizationsApiGetMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobData1bfa8925c50510000ae4479925510026>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMember(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of members for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a collection of members for the specified supervisory organization ID.
         * @param {SupervisoryOrganizationsApiGetMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMembers(requestParameters: SupervisoryOrganizationsApiGetMembersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupervisoryOrganizationsGetMembersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMembers(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves information about an organization chart of the specified supervisory organization id.
         * @param {SupervisoryOrganizationsApiGetOrgChartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgChart(requestParameters: SupervisoryOrganizationsApiGetOrgChartRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupervisoryOrganizationsGetOrgChartResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgChart(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a single organization chart instance.
         * @param {SupervisoryOrganizationsApiGetOrgChart0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgChart_1(requestParameters: SupervisoryOrganizationsApiGetOrgChart0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgChartView643e3a12629710000554e0338e670044>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgChart_1(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SupervisoryOrganizationsApi - factory interface
 * @export
 */
export const SupervisoryOrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SupervisoryOrganizationsApiFp(configuration)
    return {
        /**
         * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
         * @summary Retrieves a supervisory organization for the specified ID.
         * @param {SupervisoryOrganizationsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: SupervisoryOrganizationsApiGetByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SupervisoryOrganizationsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
         * @summary Retrieves a single supervisory organization instance.
         * @param {SupervisoryOrganizationsApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(requestParameters: SupervisoryOrganizationsApiGetInstanceRequest, options?: AxiosRequestConfig): AxiosPromise<SupervisoryOrganizationViewA02c2e1916fa100009e137235f1f0018> {
            return localVarFp.getInstance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a member for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a single member instance.
         * @param {SupervisoryOrganizationsApiGetMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember(requestParameters: SupervisoryOrganizationsApiGetMemberRequest, options?: AxiosRequestConfig): AxiosPromise<JobData1bfa8925c50510000ae4479925510026> {
            return localVarFp.getMember(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of members for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a collection of members for the specified supervisory organization ID.
         * @param {SupervisoryOrganizationsApiGetMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMembers(requestParameters: SupervisoryOrganizationsApiGetMembersRequest, options?: AxiosRequestConfig): AxiosPromise<SupervisoryOrganizationsGetMembersResponse> {
            return localVarFp.getMembers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves information about an organization chart of the specified supervisory organization id.
         * @param {SupervisoryOrganizationsApiGetOrgChartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgChart(requestParameters: SupervisoryOrganizationsApiGetOrgChartRequest, options?: AxiosRequestConfig): AxiosPromise<SupervisoryOrganizationsGetOrgChartResponse> {
            return localVarFp.getOrgChart(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
         * @summary Retrieves a single organization chart instance.
         * @param {SupervisoryOrganizationsApiGetOrgChart0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgChart_1(requestParameters: SupervisoryOrganizationsApiGetOrgChart0Request, options?: AxiosRequestConfig): AxiosPromise<OrgChartView643e3a12629710000554e0338e670044> {
            return localVarFp.getOrgChart_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in SupervisoryOrganizationsApi.
 * @export
 * @interface SupervisoryOrganizationsApiGetByIdRequest
 */
export type SupervisoryOrganizationsApiGetByIdRequest = {
    
    /**
    * If true, this method returns the inactive organizations. Default is false.
    * @type {boolean}
    * @memberof SupervisoryOrganizationsApiGetById
    */
    readonly includeInactive?: boolean
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof SupervisoryOrganizationsApiGetById
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof SupervisoryOrganizationsApiGetById
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstance operation in SupervisoryOrganizationsApi.
 * @export
 * @interface SupervisoryOrganizationsApiGetInstanceRequest
 */
export type SupervisoryOrganizationsApiGetInstanceRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof SupervisoryOrganizationsApiGetInstance
    */
    readonly iD: string
    
}

/**
 * Request parameters for getMember operation in SupervisoryOrganizationsApi.
 * @export
 * @interface SupervisoryOrganizationsApiGetMemberRequest
 */
export type SupervisoryOrganizationsApiGetMemberRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof SupervisoryOrganizationsApiGetMember
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof SupervisoryOrganizationsApiGetMember
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getMembers operation in SupervisoryOrganizationsApi.
 * @export
 * @interface SupervisoryOrganizationsApiGetMembersRequest
 */
export type SupervisoryOrganizationsApiGetMembersRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof SupervisoryOrganizationsApiGetMembers
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof SupervisoryOrganizationsApiGetMembers
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof SupervisoryOrganizationsApiGetMembers
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getOrgChart operation in SupervisoryOrganizationsApi.
 * @export
 * @interface SupervisoryOrganizationsApiGetOrgChartRequest
 */
export type SupervisoryOrganizationsApiGetOrgChartRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof SupervisoryOrganizationsApiGetOrgChart
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof SupervisoryOrganizationsApiGetOrgChart
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof SupervisoryOrganizationsApiGetOrgChart
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getOrgChart_1 operation in SupervisoryOrganizationsApi.
 * @export
 * @interface SupervisoryOrganizationsApiGetOrgChart0Request
 */
export type SupervisoryOrganizationsApiGetOrgChart0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof SupervisoryOrganizationsApiGetOrgChart0
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof SupervisoryOrganizationsApiGetOrgChart0
    */
    readonly subresourceID: string
    
}

/**
 * SupervisoryOrganizationsApiGenerated - object-oriented interface
 * @export
 * @class SupervisoryOrganizationsApiGenerated
 * @extends {BaseAPI}
 */
export class SupervisoryOrganizationsApiGenerated extends BaseAPI {
    /**
     * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
     * @summary Retrieves a supervisory organization for the specified ID.
     * @param {SupervisoryOrganizationsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisoryOrganizationsApiGenerated
     */
    public getById(requestParameters: SupervisoryOrganizationsApiGetByIdRequest = {}, options?: AxiosRequestConfig) {
        return SupervisoryOrganizationsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a supervisory organization for the specified ID.  Secured by: BDA OAuth 2.0 Connector, Manage: Supervisory Organization, View: Supervisory Organization  Scope: Organizations and Roles
     * @summary Retrieves a single supervisory organization instance.
     * @param {SupervisoryOrganizationsApiGetInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisoryOrganizationsApiGenerated
     */
    public getInstance(requestParameters: SupervisoryOrganizationsApiGetInstanceRequest, options?: AxiosRequestConfig) {
        return SupervisoryOrganizationsApiFp(this.configuration).getInstance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a member for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @summary Retrieves a single member instance.
     * @param {SupervisoryOrganizationsApiGetMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisoryOrganizationsApiGenerated
     */
    public getMember(requestParameters: SupervisoryOrganizationsApiGetMemberRequest, options?: AxiosRequestConfig) {
        return SupervisoryOrganizationsApiFp(this.configuration).getMember(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of members for the specified supervisory organization ID.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @summary Retrieves a collection of members for the specified supervisory organization ID.
     * @param {SupervisoryOrganizationsApiGetMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisoryOrganizationsApiGenerated
     */
    public getMembers(requestParameters: SupervisoryOrganizationsApiGetMembersRequest, options?: AxiosRequestConfig) {
        return SupervisoryOrganizationsApiFp(this.configuration).getMembers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @summary Retrieves information about an organization chart of the specified supervisory organization id.
     * @param {SupervisoryOrganizationsApiGetOrgChartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisoryOrganizationsApiGenerated
     */
    public getOrgChart(requestParameters: SupervisoryOrganizationsApiGetOrgChartRequest, options?: AxiosRequestConfig) {
        return SupervisoryOrganizationsApiFp(this.configuration).getOrgChart(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about an organization chart of the specified supervisory organization id.  Secured by: Reports: Organization  Scope: Organizations and Roles
     * @summary Retrieves a single organization chart instance.
     * @param {SupervisoryOrganizationsApiGetOrgChart0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupervisoryOrganizationsApiGenerated
     */
    public getOrgChart_1(requestParameters: SupervisoryOrganizationsApiGetOrgChart0Request, options?: AxiosRequestConfig) {
        return SupervisoryOrganizationsApiFp(this.configuration).getOrgChart_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
