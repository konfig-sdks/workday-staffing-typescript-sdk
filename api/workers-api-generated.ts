/* tslint:disable */
/* eslint-disable */
/*
staffing

The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.



Related Information:
- Administrator Guide: Setup Considerations: Job Changes

The version of the OpenAPI document: v6


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AssociatedCheckInDetail3267c0ba92a0100016ed105476ad03c4 } from '../models';
// @ts-ignore
import { AssociatedCheckInTopicDetail316b5a26cc3c100010a01184c23902ea } from '../models';
// @ts-ignore
import { CheckInArchiveDetail1163fe23102e10001df342088f8a018e } from '../models';
// @ts-ignore
import { CheckInAttachmentDetailEf244acfe6cf10002ebe92d43a7701d7 } from '../models';
// @ts-ignore
import { CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 } from '../models';
// @ts-ignore
import { CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 } from '../models';
// @ts-ignore
import { CheckInTopicAttachmentDetail600ecde4c8421000278d06bfacea01c1 } from '../models';
// @ts-ignore
import { CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 } from '../models';
// @ts-ignore
import { CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015 } from '../models';
// @ts-ignore
import { CheckInsSummaryB3a69f47a499100010ce6be72bfe001d } from '../models';
// @ts-ignore
import { CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e } from '../models';
// @ts-ignore
import { DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8 } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { ExternalSkillLevelA39462f09c44100005d46fd77ef00000 } from '../models';
// @ts-ignore
import { ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000 } from '../models';
// @ts-ignore
import { HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 } from '../models';
// @ts-ignore
import { Job75e528a78e9a10000ab7512c5c550115 } from '../models';
// @ts-ignore
import { JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 } from '../models';
// @ts-ignore
import { Location75e528a78e9a10000ab75125ebe50114 } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e } from '../models';
// @ts-ignore
import { Position99f6257185e61000043aadd66df203bb } from '../models';
// @ts-ignore
import { Reason85deac43cd1a10000b96c80c118f171e } from '../models';
// @ts-ignore
import { ServiceDatesData6b1db753fd82100027b0c8519c860018 } from '../models';
// @ts-ignore
import { SkillItem98f198f5056b100019631445471d225f } from '../models';
// @ts-ignore
import { SkillItemAddDefinitionFaed9891d75a10001e9a289910540228 } from '../models';
// @ts-ignore
import { SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8 } from '../models';
// @ts-ignore
import { SkillItemSourceAddRepresentationC5fabc4ca81610000d5d15309ac90122 } from '../models';
// @ts-ignore
import { SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de } from '../models';
// @ts-ignore
import { SupervisoryOrganization75e528a78e9a10000ab75132a9df0116 } from '../models';
// @ts-ignore
import { Template2b1b95dfe4af100007f63081aec5158e } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 } from '../models';
// @ts-ignore
import { WorkerDataC2466b0778c610000d1936006720000e } from '../models';
// @ts-ignore
import { WorkersGetCheckInTopicsResponse } from '../models';
// @ts-ignore
import { WorkersGetCheckInsResponse } from '../models';
// @ts-ignore
import { WorkersGetCollectionStaffingResponse } from '../models';
// @ts-ignore
import { WorkersGetExplicitSkillsResponse } from '../models';
// @ts-ignore
import { WorkersGetExternalSkillLevelResponse } from '../models';
// @ts-ignore
import { WorkersGetServiceDatesResponse } from '../models';
// @ts-ignore
import { WorkersGetSkillItemsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkersApi - axios parameter creator
 * @export
 */
export const WorkersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a single Check-In instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least the required field: date.    This endpoint is equivalent to the Create Check-In task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
         * @summary Creates Check-Ins.
         * @param {string} iD The Workday ID of the resource.
         * @param {CheckInDetail316b5a26cc3c10000ebdb0cb484602e1} checkInDetail316b5a26cc3c10000ebdb0cb484602e1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckIn: async (iD: string, checkInDetail316b5a26cc3c10000ebdb0cb484602e1: CheckInDetail316b5a26cc3c10000ebdb0cb484602e1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createCheckIn', 'iD', iD)
            // verify required parameter 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1' is not null or undefined
            assertParamExists('createCheckIn', 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1', checkInDetail316b5a26cc3c10000ebdb0cb484602e1)
            const localVarPath = `/workers/{ID}/checkIns`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkInDetail316b5a26cc3c10000ebdb0cb484602e1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkIns',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkInDetail316b5a26cc3c10000ebdb0cb484602e1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a single Check-In topic instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least these required fields: name.   This endpoint is equivalent to the Create Check-In Topic task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
         * @summary Creates Check-In topics.
         * @param {string} iD The Workday ID of the resource.
         * @param {CheckInTopicDetail3267c0ba92a010001688d79b032b03b8} checkInTopicDetail3267c0ba92a010001688d79b032b03b8 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckInTopic: async (iD: string, checkInTopicDetail3267c0ba92a010001688d79b032b03b8: CheckInTopicDetail3267c0ba92a010001688d79b032b03b8, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createCheckInTopic', 'iD', iD)
            // verify required parameter 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8' is not null or undefined
            assertParamExists('createCheckInTopic', 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8', checkInTopicDetail3267c0ba92a010001688d79b032b03b8)
            const localVarPath = `/workers/{ID}/checkInTopics`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkInTopicDetail3267c0ba92a010001688d79b032b03b8,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkInTopics',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkInTopicDetail3267c0ba92a010001688d79b032b03b8, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Creates external skill levels.
         * @param {string} iD The Workday ID of the resource.
         * @param {ExternalSkillLevelA39462f09c44100005d46fd77ef00000} externalSkillLevelA39462f09c44100005d46fd77ef00000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalSkillLevels: async (iD: string, externalSkillLevelA39462f09c44100005d46fd77ef00000: ExternalSkillLevelA39462f09c44100005d46fd77ef00000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createExternalSkillLevels', 'iD', iD)
            // verify required parameter 'externalSkillLevelA39462f09c44100005d46fd77ef00000' is not null or undefined
            assertParamExists('createExternalSkillLevels', 'externalSkillLevelA39462f09c44100005d46fd77ef00000', externalSkillLevelA39462f09c44100005d46fd77ef00000)
            const localVarPath = `/workers/{ID}/externalSkillLevel`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalSkillLevelA39462f09c44100005d46fd77ef00000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/externalSkillLevel',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalSkillLevelA39462f09c44100005d46fd77ef00000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621} homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHomeContactChangeProcess: async (iD: string, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621: HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createHomeContactChangeProcess', 'iD', iD)
            // verify required parameter 'homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621' is not null or undefined
            assertParamExists('createHomeContactChangeProcess', 'homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621', homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621)
            const localVarPath = `/workers/{ID}/homeContactInformationChanges`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/homeContactInformationChanges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {string} iD The Workday ID of the resource.
         * @param {SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de} skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkillItem: async (iD: string, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de: SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createSkillItem', 'iD', iD)
            // verify required parameter 'skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de' is not null or undefined
            assertParamExists('createSkillItem', 'skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de', skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de)
            const localVarPath = `/workers/{ID}/skillItems`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/skillItems',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @param {string} iD The Workday ID of the resource.
         * @param {WorkContactChangeEvent5fca6c96c1c81000142fd03784140113} workContactChangeEvent5fca6c96c1c81000142fd03784140113 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkContactInformationChanges: async (iD: string, workContactChangeEvent5fca6c96c1c81000142fd03784140113: WorkContactChangeEvent5fca6c96c1c81000142fd03784140113, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('createWorkContactInformationChanges', 'iD', iD)
            // verify required parameter 'workContactChangeEvent5fca6c96c1c81000142fd03784140113' is not null or undefined
            assertParamExists('createWorkContactInformationChanges', 'workContactChangeEvent5fca6c96c1c81000142fd03784140113', workContactChangeEvent5fca6c96c1c81000142fd03784140113)
            const localVarPath = `/workers/{ID}/workContactInformationChanges`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workContactChangeEvent5fca6c96c1c81000142fd03784140113,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/workContactInformationChanges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workContactChangeEvent5fca6c96c1c81000142fd03784140113, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing Check-In instance with the specified ID. This can only be done by the creater of the Check-In.    This endpoint is equivalent to the Delete Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
         * @summary Deletes an existing Check-In instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCheckIn: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('deleteCheckIn', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('deleteCheckIn', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/checkIns/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkIns/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing Check-In topic instance with the specified ID. This can only be done by the creater of the Check-In topic.   This endpoint is equivalent to the Delete Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
         * @summary Deletes an existing Check-In topic instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCheckInTopic: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('deleteCheckInTopic', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('deleteCheckInTopic', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/checkInTopics/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkInTopics/{subresourceID}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Check-In with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a single Check-In instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckIn: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCheckIn', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCheckIn', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/checkIns/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkIns/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Check-In topic with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a single Check-In topic instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckInTopic: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCheckInTopic', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCheckInTopic', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/checkInTopics/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkInTopics/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all Check-In topics for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a collection of Check-Ins topics.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckInTopics: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCheckInTopics', 'iD', iD)
            const localVarPath = `/workers/{ID}/checkInTopics`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkInTopics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all Check-Ins for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.   This endpoint is equivalent to the View Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a collection of Check-Ins.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckIns: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCheckIns', 'iD', iD)
            const localVarPath = `/workers/{ID}/checkIns`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkIns',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {boolean} [includeTerminatedWorkers] Include terminated workers in the output
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [search] Searches workers by name or worker ID. The search is case-insensitive. You can include space-delimited search strings for an OR search.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionStaffing: async (includeTerminatedWorkers?: boolean, limit?: number, offset?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (includeTerminatedWorkers !== undefined) {
                localVarQueryParameter['includeTerminatedWorkers'] = includeTerminatedWorkers;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Get Explicit Skills for Skill Enabled
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [skill] Retrieves the skills for the specified skill name.
         * @param {string} [skillSource] The Workday ID of the skill source. Returns skills associated with the skill source.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplicitSkills: async (iD: string, limit?: number, offset?: number, skill?: string, skillSource?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getExplicitSkills', 'iD', iD)
            const localVarPath = `/workers/{ID}/explicitSkills`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (skill !== undefined) {
                localVarQueryParameter['skill'] = skill;
            }

            if (skillSource !== undefined) {
                localVarQueryParameter['skillSource'] = skillSource;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/explicitSkills',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Get Explicit Skills for Skill Enabled
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplicitSkillsForSkillEnabled: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getExplicitSkillsForSkillEnabled', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getExplicitSkillsForSkillEnabled', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/explicitSkills/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/explicitSkills/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} [externalSkillId] All External Skills. If passed, the External Skill Level associated with the External Skill ID.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalSkillLevel: async (iD: string, externalSkillId?: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getExternalSkillLevel', 'iD', iD)
            const localVarPath = `/workers/{ID}/externalSkillLevel`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (externalSkillId !== undefined) {
                localVarQueryParameter['externalSkillId'] = externalSkillId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/externalSkillLevel',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalSkillLevels: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getExternalSkillLevels', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getExternalSkillLevels', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/externalSkillLevel/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/externalSkillLevel/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an existing Home Contact Change event for the Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @summary Retrieves an existing Home Contact Change event for the Person.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeContactChange: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getHomeContactChange', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getHomeContactChange', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/homeContactInformationChanges/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/homeContactInformationChanges/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about a service date for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
         * @summary Retrieves a single service date information instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDate: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getServiceDate', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getServiceDate', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/serviceDates/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/serviceDates/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all service dates for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
         * @summary Retrieves a collection of service dates for the specified worker id.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDates: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getServiceDates', 'iD', iD)
            const localVarPath = `/workers/{ID}/serviceDates`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/serviceDates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkillItems: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getSkillItems', 'iD', iD)
            const localVarPath = `/workers/{ID}/skillItems`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/skillItems',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkillItemsById: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getSkillItemsById', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getSkillItemsById', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/skillItems/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/skillItems/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffingInformation: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStaffingInformation', 'iD', iD)
            const localVarPath = `/workers/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an existing Work Contact Change event for the Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @summary Retrieves an existing Work Contact Change event for the Person.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkContactChange: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getWorkContactChange', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getWorkContactChange', 'subresourceID', subresourceID)
            const localVarPath = `/workers/{ID}/workContactInformationChanges/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/workContactInformationChanges/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates a job change request for a specific worker Call this method to start a new job change event, which returns a new job change ID. Use the new ID to reference the job change event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}, reason {id}  To retrieve a worker ID, call the GET /values/jobChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for change job for the current user are returned.  To retrieve a job ID, call the GET /values/jobChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do a job change. You can filter the results by effectiveDate. By default, it returns positions on the current date.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  To retrieve a supervisoryOrganization ID, call the GET /values/jobChangesGroup/supervisoryOrganization prompt endpoint, with proposedManager and effectiveDate query parameters. If you specify the proposedManager parameter, it returns HREF links to all supervisory organizations for that manager. If you specify effectiveDate, it filters the results by effective date. The default is the current date.  To retrieve a location ID, call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the staffingEvent query parameter.  It returns HREF links to locations by location categories for the specified location. You can filter the results by effectiveDate. By default, it returns locations on the current date.  Secured by: Change Job (REST Service)  Scope: Staffing
         * @summary Initiates a job change request for a specific worker
         * @param {string} iD The Workday ID of the resource.
         * @param {JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111} jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateJobChange: async (iD: string, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111: JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('initiateJobChange', 'iD', iD)
            // verify required parameter 'jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111' is not null or undefined
            assertParamExists('initiateJobChange', 'jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111', jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111)
            const localVarPath = `/workers/{ID}/jobChanges`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/jobChanges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates an organization assignment change for a specific worker. Call this method to start a new change organization assignment event, which returns a new change organization assignment ID. Use the new ID to reference the change organization assignment event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}  To retrieve a worker ID, call the GET /values/organizationAssignmentChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for organization assignment change for the current user are returned.  To retrieve a job ID, call the /values/organizationAssignmentChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do an organization assignment change . You can filter the results by effectiveDate. By default, it returns positions on the current date.  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Initiates an organization assignment change for a specific worker.
         * @param {string} iD The Workday ID of the resource.
         * @param {OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e} organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateOrganizationAssignmentChange: async (iD: string, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e: OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('initiateOrganizationAssignmentChange', 'iD', iD)
            // verify required parameter 'organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e' is not null or undefined
            assertParamExists('initiateOrganizationAssignmentChange', 'organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e', organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e)
            const localVarPath = `/workers/{ID}/organizationAssignmentChanges`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/organizationAssignmentChanges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
         * @summary Partially updates an existing Check-In to archived or un-archived.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {CheckInArchiveDetail1163fe23102e10001df342088f8a018e} checkInArchiveDetail1163fe23102e10001df342088f8a018e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCheckIn: async (iD: string, subresourceID: string, checkInArchiveDetail1163fe23102e10001df342088f8a018e: CheckInArchiveDetail1163fe23102e10001df342088f8a018e, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('partiallyUpdateCheckIn', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('partiallyUpdateCheckIn', 'subresourceID', subresourceID)
            // verify required parameter 'checkInArchiveDetail1163fe23102e10001df342088f8a018e' is not null or undefined
            assertParamExists('partiallyUpdateCheckIn', 'checkInArchiveDetail1163fe23102e10001df342088f8a018e', checkInArchiveDetail1163fe23102e10001df342088f8a018e)
            const localVarPath = `/workers/{ID}/checkIns/{subresourceID}?type=archive`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkInArchiveDetail1163fe23102e10001df342088f8a018e,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkIns/{subresourceID}?type=archive',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkInArchiveDetail1163fe23102e10001df342088f8a018e, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (name, privateNotes, sharedNotes, checkInTopicAttachments, or associatedCheckIns). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Edit Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Partially updates an existing Check-In topic instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {CheckInTopicDetail3267c0ba92a010001688d79b032b03b8} checkInTopicDetail3267c0ba92a010001688d79b032b03b8 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCheckInTopic: async (iD: string, subresourceID: string, checkInTopicDetail3267c0ba92a010001688d79b032b03b8: CheckInTopicDetail3267c0ba92a010001688d79b032b03b8, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('partiallyUpdateCheckInTopic', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('partiallyUpdateCheckInTopic', 'subresourceID', subresourceID)
            // verify required parameter 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8' is not null or undefined
            assertParamExists('partiallyUpdateCheckInTopic', 'checkInTopicDetail3267c0ba92a010001688d79b032b03b8', checkInTopicDetail3267c0ba92a010001688d79b032b03b8)
            const localVarPath = `/workers/{ID}/checkInTopics/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkInTopicDetail3267c0ba92a010001688d79b032b03b8,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkInTopics/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkInTopicDetail3267c0ba92a010001688d79b032b03b8, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save skills a user has  Secured by: Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Save skills a user has
         * @param {string} iD The Workday ID of the resource.
         * @param {CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e} createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserSkills: async (iD: string, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e: CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('saveUserSkills', 'iD', iD)
            // verify required parameter 'createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e' is not null or undefined
            assertParamExists('saveUserSkills', 'createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e', createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e)
            const localVarPath = `/workers/{ID}/explicitSkills`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/explicitSkills',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (date, description, or associated topics). This can only be done by the creator or participant of the Check-In.    This endpoint is equivalent to the Edit Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Partially updates an existing Check-In instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {CheckInDetail316b5a26cc3c10000ebdb0cb484602e1} checkInDetail316b5a26cc3c10000ebdb0cb484602e1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckIn: async (iD: string, subresourceID: string, checkInDetail316b5a26cc3c10000ebdb0cb484602e1: CheckInDetail316b5a26cc3c10000ebdb0cb484602e1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateCheckIn', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateCheckIn', 'subresourceID', subresourceID)
            // verify required parameter 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1' is not null or undefined
            assertParamExists('updateCheckIn', 'checkInDetail316b5a26cc3c10000ebdb0cb484602e1', checkInDetail316b5a26cc3c10000ebdb0cb484602e1)
            const localVarPath = `/workers/{ID}/checkIns/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkInDetail316b5a26cc3c10000ebdb0cb484602e1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkIns/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkInDetail316b5a26cc3c10000ebdb0cb484602e1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
         * @summary Partially updates an existing Check-In topic to archived or un-archived.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2} checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckInTopicState: async (iD: string, subresourceID: string, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2: CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateCheckInTopicState', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateCheckInTopicState', 'subresourceID', subresourceID)
            // verify required parameter 'checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2' is not null or undefined
            assertParamExists('updateCheckInTopicState', 'checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2', checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2)
            const localVarPath = `/workers/{ID}/checkInTopics/{subresourceID}?type=archive`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/checkInTopics/{subresourceID}?type=archive',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Updates external skill levels.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ExternalSkillLevelA39462f09c44100005d46fd77ef00000} externalSkillLevelA39462f09c44100005d46fd77ef00000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalSkillLevel: async (iD: string, subresourceID: string, externalSkillLevelA39462f09c44100005d46fd77ef00000: ExternalSkillLevelA39462f09c44100005d46fd77ef00000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateExternalSkillLevel', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateExternalSkillLevel', 'subresourceID', subresourceID)
            // verify required parameter 'externalSkillLevelA39462f09c44100005d46fd77ef00000' is not null or undefined
            assertParamExists('updateExternalSkillLevel', 'externalSkillLevelA39462f09c44100005d46fd77ef00000', externalSkillLevelA39462f09c44100005d46fd77ef00000)
            const localVarPath = `/workers/{ID}/externalSkillLevel/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: externalSkillLevelA39462f09c44100005d46fd77ef00000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workers/{ID}/externalSkillLevel/{subresourceID}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(externalSkillLevelA39462f09c44100005d46fd77ef00000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkersApi - functional programming interface
 * @export
 */
export const WorkersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkersApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a single Check-In instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least the required field: date.    This endpoint is equivalent to the Create Check-In task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
         * @summary Creates Check-Ins.
         * @param {WorkersApiCreateCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckIn(requestParameters: WorkersApiCreateCheckInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1>> {
            const checkInDetail316b5a26cc3c10000ebdb0cb484602e1: CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckIn(requestParameters.iD, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a single Check-In topic instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least these required fields: name.   This endpoint is equivalent to the Create Check-In Topic task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
         * @summary Creates Check-In topics.
         * @param {WorkersApiCreateCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckInTopic(requestParameters: WorkersApiCreateCheckInTopicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8>> {
            const checkInTopicDetail3267c0ba92a010001688d79b032b03b8: CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckInTopic(requestParameters.iD, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Creates external skill levels.
         * @param {WorkersApiCreateExternalSkillLevelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExternalSkillLevels(requestParameters: WorkersApiCreateExternalSkillLevelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalSkillLevelA39462f09c44100005d46fd77ef00000>> {
            const externalSkillLevelA39462f09c44100005d46fd77ef00000: ExternalSkillLevelA39462f09c44100005d46fd77ef00000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExternalSkillLevels(requestParameters.iD, externalSkillLevelA39462f09c44100005d46fd77ef00000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @param {WorkersApiCreateHomeContactChangeProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHomeContactChangeProcess(requestParameters: WorkersApiCreateHomeContactChangeProcessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621>> {
            const homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621: HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHomeContactChangeProcess(requestParameters.iD, homeContactChangeEventF42ba27d87ed10001aa58a5d231b1621, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {WorkersApiCreateSkillItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSkillItem(requestParameters: WorkersApiCreateSkillItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de>> {
            const skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de: SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSkillItem(requestParameters.iD, skillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @param {WorkersApiCreateWorkContactInformationChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkContactInformationChanges(requestParameters: WorkersApiCreateWorkContactInformationChangesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113>> {
            const workContactChangeEvent5fca6c96c1c81000142fd03784140113: WorkContactChangeEvent5fca6c96c1c81000142fd03784140113 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkContactInformationChanges(requestParameters.iD, workContactChangeEvent5fca6c96c1c81000142fd03784140113, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an existing Check-In instance with the specified ID. This can only be done by the creater of the Check-In.    This endpoint is equivalent to the Delete Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
         * @summary Deletes an existing Check-In instance.
         * @param {WorkersApiDeleteCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCheckIn(requestParameters: WorkersApiDeleteCheckInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCheckIn(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an existing Check-In topic instance with the specified ID. This can only be done by the creater of the Check-In topic.   This endpoint is equivalent to the Delete Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
         * @summary Deletes an existing Check-In topic instance.
         * @param {WorkersApiDeleteCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCheckInTopic(requestParameters: WorkersApiDeleteCheckInTopicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCheckInTopic(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Check-In with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a single Check-In instance.
         * @param {WorkersApiGetCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckIn(requestParameters: WorkersApiGetCheckInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckIn(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Check-In topic with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a single Check-In topic instance.
         * @param {WorkersApiGetCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckInTopic(requestParameters: WorkersApiGetCheckInTopicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckInTopic(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all Check-In topics for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a collection of Check-Ins topics.
         * @param {WorkersApiGetCheckInTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckInTopics(requestParameters: WorkersApiGetCheckInTopicsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetCheckInTopicsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckInTopics(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all Check-Ins for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.   This endpoint is equivalent to the View Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a collection of Check-Ins.
         * @param {WorkersApiGetCheckInsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckIns(requestParameters: WorkersApiGetCheckInsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetCheckInsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckIns(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetCollectionStaffingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionStaffing(requestParameters: WorkersApiGetCollectionStaffingRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetCollectionStaffingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionStaffing(requestParameters.includeTerminatedWorkers, requestParameters.limit, requestParameters.offset, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Get Explicit Skills for Skill Enabled
         * @param {WorkersApiGetExplicitSkillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExplicitSkills(requestParameters: WorkersApiGetExplicitSkillsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetExplicitSkillsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExplicitSkills(requestParameters.iD, requestParameters.limit, requestParameters.offset, requestParameters.skill, requestParameters.skillSource, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Get Explicit Skills for Skill Enabled
         * @param {WorkersApiGetExplicitSkillsForSkillEnabledRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExplicitSkillsForSkillEnabled(requestParameters: WorkersApiGetExplicitSkillsForSkillEnabledRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExplicitSkillsForSkillEnabled(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
         * @param {WorkersApiGetExternalSkillLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalSkillLevel(requestParameters: WorkersApiGetExternalSkillLevelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetExternalSkillLevelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalSkillLevel(requestParameters.iD, requestParameters.externalSkillId, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
         * @param {WorkersApiGetExternalSkillLevelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalSkillLevels(requestParameters: WorkersApiGetExternalSkillLevelsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalSkillLevels(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an existing Home Contact Change event for the Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @summary Retrieves an existing Home Contact Change event for the Person.
         * @param {WorkersApiGetHomeContactChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeContactChange(requestParameters: WorkersApiGetHomeContactChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeContactChange(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves information about a service date for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
         * @summary Retrieves a single service date information instance.
         * @param {WorkersApiGetServiceDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceDate(requestParameters: WorkersApiGetServiceDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDatesData6b1db753fd82100027b0c8519c860018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceDate(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all service dates for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
         * @summary Retrieves a collection of service dates for the specified worker id.
         * @param {WorkersApiGetServiceDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceDates(requestParameters: WorkersApiGetServiceDatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetServiceDatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceDates(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {WorkersApiGetSkillItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSkillItems(requestParameters: WorkersApiGetSkillItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkersGetSkillItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSkillItems(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {WorkersApiGetSkillItemsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSkillItemsById(requestParameters: WorkersApiGetSkillItemsByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSkillItemsById(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetStaffingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaffingInformation(requestParameters: WorkersApiGetStaffingInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkerDataC2466b0778c610000d1936006720000e>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaffingInformation(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an existing Work Contact Change event for the Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @summary Retrieves an existing Work Contact Change event for the Person.
         * @param {WorkersApiGetWorkContactChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkContactChange(requestParameters: WorkersApiGetWorkContactChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkContactChange(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates a job change request for a specific worker Call this method to start a new job change event, which returns a new job change ID. Use the new ID to reference the job change event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}, reason {id}  To retrieve a worker ID, call the GET /values/jobChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for change job for the current user are returned.  To retrieve a job ID, call the GET /values/jobChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do a job change. You can filter the results by effectiveDate. By default, it returns positions on the current date.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  To retrieve a supervisoryOrganization ID, call the GET /values/jobChangesGroup/supervisoryOrganization prompt endpoint, with proposedManager and effectiveDate query parameters. If you specify the proposedManager parameter, it returns HREF links to all supervisory organizations for that manager. If you specify effectiveDate, it filters the results by effective date. The default is the current date.  To retrieve a location ID, call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the staffingEvent query parameter.  It returns HREF links to locations by location categories for the specified location. You can filter the results by effectiveDate. By default, it returns locations on the current date.  Secured by: Change Job (REST Service)  Scope: Staffing
         * @summary Initiates a job change request for a specific worker
         * @param {WorkersApiInitiateJobChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateJobChange(requestParameters: WorkersApiInitiateJobChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111>> {
            const jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111: JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateJobChange(requestParameters.iD, jobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates an organization assignment change for a specific worker. Call this method to start a new change organization assignment event, which returns a new change organization assignment ID. Use the new ID to reference the change organization assignment event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}  To retrieve a worker ID, call the GET /values/organizationAssignmentChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for organization assignment change for the current user are returned.  To retrieve a job ID, call the /values/organizationAssignmentChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do an organization assignment change . You can filter the results by effectiveDate. By default, it returns positions on the current date.  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Initiates an organization assignment change for a specific worker.
         * @param {WorkersApiInitiateOrganizationAssignmentChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateOrganizationAssignmentChange(requestParameters: WorkersApiInitiateOrganizationAssignmentChangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e>> {
            const organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e: OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateOrganizationAssignmentChange(requestParameters.iD, organizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
         * @summary Partially updates an existing Check-In to archived or un-archived.
         * @param {WorkersApiPartiallyUpdateCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdateCheckIn(requestParameters: WorkersApiPartiallyUpdateCheckInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInArchiveDetail1163fe23102e10001df342088f8a018e>> {
            const checkInArchiveDetail1163fe23102e10001df342088f8a018e: CheckInArchiveDetail1163fe23102e10001df342088f8a018e = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdateCheckIn(requestParameters.iD, requestParameters.subresourceID, checkInArchiveDetail1163fe23102e10001df342088f8a018e, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (name, privateNotes, sharedNotes, checkInTopicAttachments, or associatedCheckIns). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Edit Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Partially updates an existing Check-In topic instance.
         * @param {WorkersApiPartiallyUpdateCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdateCheckInTopic(requestParameters: WorkersApiPartiallyUpdateCheckInTopicRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8>> {
            const checkInTopicDetail3267c0ba92a010001688d79b032b03b8: CheckInTopicDetail3267c0ba92a010001688d79b032b03b8 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdateCheckInTopic(requestParameters.iD, requestParameters.subresourceID, checkInTopicDetail3267c0ba92a010001688d79b032b03b8, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Save skills a user has  Secured by: Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Save skills a user has
         * @param {WorkersApiSaveUserSkillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUserSkills(requestParameters: WorkersApiSaveUserSkillsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e>> {
            const createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e: CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUserSkills(requestParameters.iD, createSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (date, description, or associated topics). This can only be done by the creator or participant of the Check-In.    This endpoint is equivalent to the Edit Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Partially updates an existing Check-In instance.
         * @param {WorkersApiUpdateCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCheckIn(requestParameters: WorkersApiUpdateCheckInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1>> {
            const checkInDetail316b5a26cc3c10000ebdb0cb484602e1: CheckInDetail316b5a26cc3c10000ebdb0cb484602e1 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCheckIn(requestParameters.iD, requestParameters.subresourceID, checkInDetail316b5a26cc3c10000ebdb0cb484602e1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
         * @summary Partially updates an existing Check-In topic to archived or un-archived.
         * @param {WorkersApiUpdateCheckInTopicStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCheckInTopicState(requestParameters: WorkersApiUpdateCheckInTopicStateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2>> {
            const checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2: CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCheckInTopicState(requestParameters.iD, requestParameters.subresourceID, checkInTopicArchiveDetail1163fe23102e10001f72d77b213401a2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Updates external skill levels.
         * @param {WorkersApiUpdateExternalSkillLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExternalSkillLevel(requestParameters: WorkersApiUpdateExternalSkillLevelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalSkillLevelA39462f09c44100005d46fd77ef00000>> {
            const externalSkillLevelA39462f09c44100005d46fd77ef00000: ExternalSkillLevelA39462f09c44100005d46fd77ef00000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExternalSkillLevel(requestParameters.iD, requestParameters.subresourceID, externalSkillLevelA39462f09c44100005d46fd77ef00000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkersApi - factory interface
 * @export
 */
export const WorkersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkersApiFp(configuration)
    return {
        /**
         * Creates a single Check-In instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least the required field: date.    This endpoint is equivalent to the Create Check-In task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
         * @summary Creates Check-Ins.
         * @param {WorkersApiCreateCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckIn(requestParameters: WorkersApiCreateCheckInRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> {
            return localVarFp.createCheckIn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a single Check-In topic instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least these required fields: name.   This endpoint is equivalent to the Create Check-In Topic task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
         * @summary Creates Check-In topics.
         * @param {WorkersApiCreateCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckInTopic(requestParameters: WorkersApiCreateCheckInTopicRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> {
            return localVarFp.createCheckInTopic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Creates external skill levels.
         * @param {WorkersApiCreateExternalSkillLevelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalSkillLevels(requestParameters: WorkersApiCreateExternalSkillLevelsRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> {
            return localVarFp.createExternalSkillLevels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @param {WorkersApiCreateHomeContactChangeProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHomeContactChangeProcess(requestParameters: WorkersApiCreateHomeContactChangeProcessRequest, options?: AxiosRequestConfig): AxiosPromise<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> {
            return localVarFp.createHomeContactChangeProcess(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {WorkersApiCreateSkillItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSkillItem(requestParameters: WorkersApiCreateSkillItemRequest, options?: AxiosRequestConfig): AxiosPromise<SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de> {
            return localVarFp.createSkillItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @param {WorkersApiCreateWorkContactInformationChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkContactInformationChanges(requestParameters: WorkersApiCreateWorkContactInformationChangesRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> {
            return localVarFp.createWorkContactInformationChanges(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing Check-In instance with the specified ID. This can only be done by the creater of the Check-In.    This endpoint is equivalent to the Delete Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
         * @summary Deletes an existing Check-In instance.
         * @param {WorkersApiDeleteCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCheckIn(requestParameters: WorkersApiDeleteCheckInRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCheckIn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an existing Check-In topic instance with the specified ID. This can only be done by the creater of the Check-In topic.   This endpoint is equivalent to the Delete Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
         * @summary Deletes an existing Check-In topic instance.
         * @param {WorkersApiDeleteCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCheckInTopic(requestParameters: WorkersApiDeleteCheckInTopicRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCheckInTopic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Check-In with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a single Check-In instance.
         * @param {WorkersApiGetCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckIn(requestParameters: WorkersApiGetCheckInRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInsSummaryB3a69f47a499100010ce6be72bfe001d> {
            return localVarFp.getCheckIn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Check-In topic with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a single Check-In topic instance.
         * @param {WorkersApiGetCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckInTopic(requestParameters: WorkersApiGetCheckInTopicRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInTopicsSummaryD81c816de26f10000ef2c5cb2fdd0015> {
            return localVarFp.getCheckInTopic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all Check-In topics for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a collection of Check-Ins topics.
         * @param {WorkersApiGetCheckInTopicsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckInTopics(requestParameters: WorkersApiGetCheckInTopicsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetCheckInTopicsResponse> {
            return localVarFp.getCheckInTopics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all Check-Ins for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.   This endpoint is equivalent to the View Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Retrieves a collection of Check-Ins.
         * @param {WorkersApiGetCheckInsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckIns(requestParameters: WorkersApiGetCheckInsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetCheckInsResponse> {
            return localVarFp.getCheckIns(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetCollectionStaffingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionStaffing(requestParameters: WorkersApiGetCollectionStaffingRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkersGetCollectionStaffingResponse> {
            return localVarFp.getCollectionStaffing(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Get Explicit Skills for Skill Enabled
         * @param {WorkersApiGetExplicitSkillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplicitSkills(requestParameters: WorkersApiGetExplicitSkillsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetExplicitSkillsResponse> {
            return localVarFp.getExplicitSkills(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Get Explicit Skills for Skill Enabled
         * @param {WorkersApiGetExplicitSkillsForSkillEnabledRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExplicitSkillsForSkillEnabled(requestParameters: WorkersApiGetExplicitSkillsForSkillEnabledRequest, options?: AxiosRequestConfig): AxiosPromise<DisplayExplicitSkillRepresentationD6ca778018011000182fa5be1ae901a8> {
            return localVarFp.getExplicitSkillsForSkillEnabled(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
         * @param {WorkersApiGetExternalSkillLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalSkillLevel(requestParameters: WorkersApiGetExternalSkillLevelRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetExternalSkillLevelResponse> {
            return localVarFp.getExternalSkillLevel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
         * @param {WorkersApiGetExternalSkillLevelsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalSkillLevels(requestParameters: WorkersApiGetExternalSkillLevelsRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalSkillLevelDetail1c67ac98c0f310002706be33dcdb0000> {
            return localVarFp.getExternalSkillLevels(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an existing Home Contact Change event for the Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
         * @summary Retrieves an existing Home Contact Change event for the Person.
         * @param {WorkersApiGetHomeContactChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeContactChange(requestParameters: WorkersApiGetHomeContactChangeRequest, options?: AxiosRequestConfig): AxiosPromise<HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621> {
            return localVarFp.getHomeContactChange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about a service date for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
         * @summary Retrieves a single service date information instance.
         * @param {WorkersApiGetServiceDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDate(requestParameters: WorkersApiGetServiceDateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceDatesData6b1db753fd82100027b0c8519c860018> {
            return localVarFp.getServiceDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all service dates for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
         * @summary Retrieves a collection of service dates for the specified worker id.
         * @param {WorkersApiGetServiceDatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDates(requestParameters: WorkersApiGetServiceDatesRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetServiceDatesResponse> {
            return localVarFp.getServiceDates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {WorkersApiGetSkillItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkillItems(requestParameters: WorkersApiGetSkillItemsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkersGetSkillItemsResponse> {
            return localVarFp.getSkillItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
         * @param {WorkersApiGetSkillItemsByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkillItemsById(requestParameters: WorkersApiGetSkillItemsByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SkillItemDisplayDefinition4b4b7d34b4a21000301eaf52086700d8> {
            return localVarFp.getSkillItemsById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
         * @summary Retrieves a collection of workers and current staffing information.
         * @param {WorkersApiGetStaffingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffingInformation(requestParameters: WorkersApiGetStaffingInformationRequest, options?: AxiosRequestConfig): AxiosPromise<WorkerDataC2466b0778c610000d1936006720000e> {
            return localVarFp.getStaffingInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an existing Work Contact Change event for the Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
         * @summary Retrieves an existing Work Contact Change event for the Person.
         * @param {WorkersApiGetWorkContactChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkContactChange(requestParameters: WorkersApiGetWorkContactChangeRequest, options?: AxiosRequestConfig): AxiosPromise<WorkContactChangeEvent5fca6c96c1c81000142fd03784140113> {
            return localVarFp.getWorkContactChange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates a job change request for a specific worker Call this method to start a new job change event, which returns a new job change ID. Use the new ID to reference the job change event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}, reason {id}  To retrieve a worker ID, call the GET /values/jobChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for change job for the current user are returned.  To retrieve a job ID, call the GET /values/jobChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do a job change. You can filter the results by effectiveDate. By default, it returns positions on the current date.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  To retrieve a supervisoryOrganization ID, call the GET /values/jobChangesGroup/supervisoryOrganization prompt endpoint, with proposedManager and effectiveDate query parameters. If you specify the proposedManager parameter, it returns HREF links to all supervisory organizations for that manager. If you specify effectiveDate, it filters the results by effective date. The default is the current date.  To retrieve a location ID, call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the staffingEvent query parameter.  It returns HREF links to locations by location categories for the specified location. You can filter the results by effectiveDate. By default, it returns locations on the current date.  Secured by: Change Job (REST Service)  Scope: Staffing
         * @summary Initiates a job change request for a specific worker
         * @param {WorkersApiInitiateJobChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateJobChange(requestParameters: WorkersApiInitiateJobChangeRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111> {
            return localVarFp.initiateJobChange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates an organization assignment change for a specific worker. Call this method to start a new change organization assignment event, which returns a new change organization assignment ID. Use the new ID to reference the change organization assignment event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}  To retrieve a worker ID, call the GET /values/organizationAssignmentChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for organization assignment change for the current user are returned.  To retrieve a job ID, call the /values/organizationAssignmentChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do an organization assignment change . You can filter the results by effectiveDate. By default, it returns positions on the current date.  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Initiates an organization assignment change for a specific worker.
         * @param {WorkersApiInitiateOrganizationAssignmentChangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateOrganizationAssignmentChange(requestParameters: WorkersApiInitiateOrganizationAssignmentChangeRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e> {
            return localVarFp.initiateOrganizationAssignmentChange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
         * @summary Partially updates an existing Check-In to archived or un-archived.
         * @param {WorkersApiPartiallyUpdateCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCheckIn(requestParameters: WorkersApiPartiallyUpdateCheckInRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInArchiveDetail1163fe23102e10001df342088f8a018e> {
            return localVarFp.partiallyUpdateCheckIn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (name, privateNotes, sharedNotes, checkInTopicAttachments, or associatedCheckIns). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Edit Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Partially updates an existing Check-In topic instance.
         * @param {WorkersApiPartiallyUpdateCheckInTopicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCheckInTopic(requestParameters: WorkersApiPartiallyUpdateCheckInTopicRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInTopicDetail3267c0ba92a010001688d79b032b03b8> {
            return localVarFp.partiallyUpdateCheckInTopic(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Save skills a user has  Secured by: Self-Service: Skills  Scope: Worker Profile and Skills
         * @summary Save skills a user has
         * @param {WorkersApiSaveUserSkillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUserSkills(requestParameters: WorkersApiSaveUserSkillsRequest, options?: AxiosRequestConfig): AxiosPromise<CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e> {
            return localVarFp.saveUserSkills(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (date, description, or associated topics). This can only be done by the creator or participant of the Check-In.    This endpoint is equivalent to the Edit Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
         * @summary Partially updates an existing Check-In instance.
         * @param {WorkersApiUpdateCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckIn(requestParameters: WorkersApiUpdateCheckInRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInDetail316b5a26cc3c10000ebdb0cb484602e1> {
            return localVarFp.updateCheckIn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
         * @summary Partially updates an existing Check-In topic to archived or un-archived.
         * @param {WorkersApiUpdateCheckInTopicStateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCheckInTopicState(requestParameters: WorkersApiUpdateCheckInTopicStateRequest, options?: AxiosRequestConfig): AxiosPromise<CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2> {
            return localVarFp.updateCheckInTopicState(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
         * @summary Updates external skill levels.
         * @param {WorkersApiUpdateExternalSkillLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExternalSkillLevel(requestParameters: WorkersApiUpdateExternalSkillLevelRequest, options?: AxiosRequestConfig): AxiosPromise<ExternalSkillLevelA39462f09c44100005d46fd77ef00000> {
            return localVarFp.updateExternalSkillLevel(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCheckIn operation in WorkersApi.
 * @export
 * @interface WorkersApiCreateCheckInRequest
 */
export type WorkersApiCreateCheckInRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiCreateCheckIn
    */
    readonly iD: string
    
} & CheckInDetail316b5a26cc3c10000ebdb0cb484602e1

/**
 * Request parameters for createCheckInTopic operation in WorkersApi.
 * @export
 * @interface WorkersApiCreateCheckInTopicRequest
 */
export type WorkersApiCreateCheckInTopicRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiCreateCheckInTopic
    */
    readonly iD: string
    
} & CheckInTopicDetail3267c0ba92a010001688d79b032b03b8

/**
 * Request parameters for createExternalSkillLevels operation in WorkersApi.
 * @export
 * @interface WorkersApiCreateExternalSkillLevelsRequest
 */
export type WorkersApiCreateExternalSkillLevelsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiCreateExternalSkillLevels
    */
    readonly iD: string
    
} & ExternalSkillLevelA39462f09c44100005d46fd77ef00000

/**
 * Request parameters for createHomeContactChangeProcess operation in WorkersApi.
 * @export
 * @interface WorkersApiCreateHomeContactChangeProcessRequest
 */
export type WorkersApiCreateHomeContactChangeProcessRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiCreateHomeContactChangeProcess
    */
    readonly iD: string
    
} & HomeContactChangeEventF42ba27d87ed10001aa58a5d231b1621

/**
 * Request parameters for createSkillItem operation in WorkersApi.
 * @export
 * @interface WorkersApiCreateSkillItemRequest
 */
export type WorkersApiCreateSkillItemRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiCreateSkillItem
    */
    readonly iD: string
    
} & SkillItemsBulkDefinition9d815bbfd67010000d6ed56204ab12de

/**
 * Request parameters for createWorkContactInformationChanges operation in WorkersApi.
 * @export
 * @interface WorkersApiCreateWorkContactInformationChangesRequest
 */
export type WorkersApiCreateWorkContactInformationChangesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiCreateWorkContactInformationChanges
    */
    readonly iD: string
    
} & WorkContactChangeEvent5fca6c96c1c81000142fd03784140113

/**
 * Request parameters for deleteCheckIn operation in WorkersApi.
 * @export
 * @interface WorkersApiDeleteCheckInRequest
 */
export type WorkersApiDeleteCheckInRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiDeleteCheckIn
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiDeleteCheckIn
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for deleteCheckInTopic operation in WorkersApi.
 * @export
 * @interface WorkersApiDeleteCheckInTopicRequest
 */
export type WorkersApiDeleteCheckInTopicRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiDeleteCheckInTopic
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiDeleteCheckInTopic
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCheckIn operation in WorkersApi.
 * @export
 * @interface WorkersApiGetCheckInRequest
 */
export type WorkersApiGetCheckInRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetCheckIn
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetCheckIn
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCheckInTopic operation in WorkersApi.
 * @export
 * @interface WorkersApiGetCheckInTopicRequest
 */
export type WorkersApiGetCheckInTopicRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetCheckInTopic
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetCheckInTopic
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCheckInTopics operation in WorkersApi.
 * @export
 * @interface WorkersApiGetCheckInTopicsRequest
 */
export type WorkersApiGetCheckInTopicsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetCheckInTopics
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetCheckInTopics
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetCheckInTopics
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getCheckIns operation in WorkersApi.
 * @export
 * @interface WorkersApiGetCheckInsRequest
 */
export type WorkersApiGetCheckInsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetCheckIns
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetCheckIns
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetCheckIns
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getCollectionStaffing operation in WorkersApi.
 * @export
 * @interface WorkersApiGetCollectionStaffingRequest
 */
export type WorkersApiGetCollectionStaffingRequest = {
    
    /**
    * Include terminated workers in the output
    * @type {boolean}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly includeTerminatedWorkers?: boolean
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly offset?: number
    
    /**
    * Searches workers by name or worker ID. The search is case-insensitive. You can include space-delimited search strings for an OR search.
    * @type {string}
    * @memberof WorkersApiGetCollectionStaffing
    */
    readonly search?: string
    
}

/**
 * Request parameters for getExplicitSkills operation in WorkersApi.
 * @export
 * @interface WorkersApiGetExplicitSkillsRequest
 */
export type WorkersApiGetExplicitSkillsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetExplicitSkills
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetExplicitSkills
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetExplicitSkills
    */
    readonly offset?: number
    
    /**
    * Retrieves the skills for the specified skill name.
    * @type {string}
    * @memberof WorkersApiGetExplicitSkills
    */
    readonly skill?: string
    
    /**
    * The Workday ID of the skill source. Returns skills associated with the skill source.
    * @type {string}
    * @memberof WorkersApiGetExplicitSkills
    */
    readonly skillSource?: string
    
}

/**
 * Request parameters for getExplicitSkillsForSkillEnabled operation in WorkersApi.
 * @export
 * @interface WorkersApiGetExplicitSkillsForSkillEnabledRequest
 */
export type WorkersApiGetExplicitSkillsForSkillEnabledRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetExplicitSkillsForSkillEnabled
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetExplicitSkillsForSkillEnabled
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getExternalSkillLevel operation in WorkersApi.
 * @export
 * @interface WorkersApiGetExternalSkillLevelRequest
 */
export type WorkersApiGetExternalSkillLevelRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetExternalSkillLevel
    */
    readonly iD: string
    
    /**
    * All External Skills. If passed, the External Skill Level associated with the External Skill ID.
    * @type {string}
    * @memberof WorkersApiGetExternalSkillLevel
    */
    readonly externalSkillId?: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetExternalSkillLevel
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetExternalSkillLevel
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getExternalSkillLevels operation in WorkersApi.
 * @export
 * @interface WorkersApiGetExternalSkillLevelsRequest
 */
export type WorkersApiGetExternalSkillLevelsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetExternalSkillLevels
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetExternalSkillLevels
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getHomeContactChange operation in WorkersApi.
 * @export
 * @interface WorkersApiGetHomeContactChangeRequest
 */
export type WorkersApiGetHomeContactChangeRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetHomeContactChange
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetHomeContactChange
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getServiceDate operation in WorkersApi.
 * @export
 * @interface WorkersApiGetServiceDateRequest
 */
export type WorkersApiGetServiceDateRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetServiceDate
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetServiceDate
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getServiceDates operation in WorkersApi.
 * @export
 * @interface WorkersApiGetServiceDatesRequest
 */
export type WorkersApiGetServiceDatesRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetServiceDates
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetServiceDates
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetServiceDates
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getSkillItems operation in WorkersApi.
 * @export
 * @interface WorkersApiGetSkillItemsRequest
 */
export type WorkersApiGetSkillItemsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetSkillItems
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof WorkersApiGetSkillItems
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof WorkersApiGetSkillItems
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getSkillItemsById operation in WorkersApi.
 * @export
 * @interface WorkersApiGetSkillItemsByIdRequest
 */
export type WorkersApiGetSkillItemsByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetSkillItemsById
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetSkillItemsById
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getStaffingInformation operation in WorkersApi.
 * @export
 * @interface WorkersApiGetStaffingInformationRequest
 */
export type WorkersApiGetStaffingInformationRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetStaffingInformation
    */
    readonly iD: string
    
}

/**
 * Request parameters for getWorkContactChange operation in WorkersApi.
 * @export
 * @interface WorkersApiGetWorkContactChangeRequest
 */
export type WorkersApiGetWorkContactChangeRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiGetWorkContactChange
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiGetWorkContactChange
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for initiateJobChange operation in WorkersApi.
 * @export
 * @interface WorkersApiInitiateJobChangeRequest
 */
export type WorkersApiInitiateJobChangeRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiInitiateJobChange
    */
    readonly iD: string
    
} & JobChangesStartDetailsPOSTData75e528a78e9a10000ab750ea156f0111

/**
 * Request parameters for initiateOrganizationAssignmentChange operation in WorkersApi.
 * @export
 * @interface WorkersApiInitiateOrganizationAssignmentChangeRequest
 */
export type WorkersApiInitiateOrganizationAssignmentChangeRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiInitiateOrganizationAssignmentChange
    */
    readonly iD: string
    
} & OrganizationAssignmentChangesPostCc45d62b623c1000132ac812c30a052e

/**
 * Request parameters for partiallyUpdateCheckIn operation in WorkersApi.
 * @export
 * @interface WorkersApiPartiallyUpdateCheckInRequest
 */
export type WorkersApiPartiallyUpdateCheckInRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiPartiallyUpdateCheckIn
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiPartiallyUpdateCheckIn
    */
    readonly subresourceID: string
    
} & CheckInArchiveDetail1163fe23102e10001df342088f8a018e

/**
 * Request parameters for partiallyUpdateCheckInTopic operation in WorkersApi.
 * @export
 * @interface WorkersApiPartiallyUpdateCheckInTopicRequest
 */
export type WorkersApiPartiallyUpdateCheckInTopicRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiPartiallyUpdateCheckInTopic
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiPartiallyUpdateCheckInTopic
    */
    readonly subresourceID: string
    
} & CheckInTopicDetail3267c0ba92a010001688d79b032b03b8

/**
 * Request parameters for saveUserSkills operation in WorkersApi.
 * @export
 * @interface WorkersApiSaveUserSkillsRequest
 */
export type WorkersApiSaveUserSkillsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiSaveUserSkills
    */
    readonly iD: string
    
} & CreateSkillUsageRepresentation98f198f5056b1000196313ffe9a0225e

/**
 * Request parameters for updateCheckIn operation in WorkersApi.
 * @export
 * @interface WorkersApiUpdateCheckInRequest
 */
export type WorkersApiUpdateCheckInRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiUpdateCheckIn
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiUpdateCheckIn
    */
    readonly subresourceID: string
    
} & CheckInDetail316b5a26cc3c10000ebdb0cb484602e1

/**
 * Request parameters for updateCheckInTopicState operation in WorkersApi.
 * @export
 * @interface WorkersApiUpdateCheckInTopicStateRequest
 */
export type WorkersApiUpdateCheckInTopicStateRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiUpdateCheckInTopicState
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiUpdateCheckInTopicState
    */
    readonly subresourceID: string
    
} & CheckInTopicArchiveDetail1163fe23102e10001f72d77b213401a2

/**
 * Request parameters for updateExternalSkillLevel operation in WorkersApi.
 * @export
 * @interface WorkersApiUpdateExternalSkillLevelRequest
 */
export type WorkersApiUpdateExternalSkillLevelRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof WorkersApiUpdateExternalSkillLevel
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof WorkersApiUpdateExternalSkillLevel
    */
    readonly subresourceID: string
    
} & ExternalSkillLevelA39462f09c44100005d46fd77ef00000

/**
 * WorkersApiGenerated - object-oriented interface
 * @export
 * @class WorkersApiGenerated
 * @extends {BaseAPI}
 */
export class WorkersApiGenerated extends BaseAPI {
    /**
     * Creates a single Check-In instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least the required field: date.    This endpoint is equivalent to the Create Check-In task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
     * @summary Creates Check-Ins.
     * @param {WorkersApiCreateCheckInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public createCheckIn(requestParameters: WorkersApiCreateCheckInRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).createCheckIn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a single Check-In topic instance with the specified data with the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  In the request body, specify at least these required fields: name.   This endpoint is equivalent to the Create Check-In Topic task in Workday.  Secured by: Worker Data: Check-Ins REST API  Scope: Performance Enablement  Contains attachment(s)
     * @summary Creates Check-In topics.
     * @param {WorkersApiCreateCheckInTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public createCheckInTopic(requestParameters: WorkersApiCreateCheckInTopicRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).createCheckInTopic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @summary Creates external skill levels.
     * @param {WorkersApiCreateExternalSkillLevelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public createExternalSkillLevels(requestParameters: WorkersApiCreateExternalSkillLevelsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).createExternalSkillLevels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     * @param {WorkersApiCreateHomeContactChangeProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public createHomeContactChangeProcess(requestParameters: WorkersApiCreateHomeContactChangeProcessRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).createHomeContactChangeProcess(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param {WorkersApiCreateSkillItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public createSkillItem(requestParameters: WorkersApiCreateSkillItemRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).createSkillItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new Home Contact Change business process event for the parent Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
     * @param {WorkersApiCreateWorkContactInformationChangesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public createWorkContactInformationChanges(requestParameters: WorkersApiCreateWorkContactInformationChangesRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).createWorkContactInformationChanges(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing Check-In instance with the specified ID. This can only be done by the creater of the Check-In.    This endpoint is equivalent to the Delete Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
     * @summary Deletes an existing Check-In instance.
     * @param {WorkersApiDeleteCheckInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public deleteCheckIn(requestParameters: WorkersApiDeleteCheckInRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).deleteCheckIn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an existing Check-In topic instance with the specified ID. This can only be done by the creater of the Check-In topic.   This endpoint is equivalent to the Delete Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement
     * @summary Deletes an existing Check-In topic instance.
     * @param {WorkersApiDeleteCheckInTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public deleteCheckInTopic(requestParameters: WorkersApiDeleteCheckInTopicRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).deleteCheckInTopic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Check-In with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @summary Retrieves a single Check-In instance.
     * @param {WorkersApiGetCheckInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getCheckIn(requestParameters: WorkersApiGetCheckInRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getCheckIn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Check-In topic with the specified ID for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @summary Retrieves a single Check-In topic instance.
     * @param {WorkersApiGetCheckInTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getCheckInTopic(requestParameters: WorkersApiGetCheckInTopicRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getCheckInTopic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all Check-In topics for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @summary Retrieves a collection of Check-Ins topics.
     * @param {WorkersApiGetCheckInTopicsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getCheckInTopics(requestParameters: WorkersApiGetCheckInTopicsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getCheckInTopics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all Check-Ins for the specified worker. The worker is specified by the Workday ID of the worker.  You can use a returned id from GET /workers in the Staffing service /staffing.   This endpoint is equivalent to the View Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @summary Retrieves a collection of Check-Ins.
     * @param {WorkersApiGetCheckInsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getCheckIns(requestParameters: WorkersApiGetCheckInsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getCheckIns(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @summary Retrieves a collection of workers and current staffing information.
     * @param {WorkersApiGetCollectionStaffingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getCollectionStaffing(requestParameters: WorkersApiGetCollectionStaffingRequest = {}, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getCollectionStaffing(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @summary Get Explicit Skills for Skill Enabled
     * @param {WorkersApiGetExplicitSkillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getExplicitSkills(requestParameters: WorkersApiGetExplicitSkillsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getExplicitSkills(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Explicit Skills for Skill Enabled  Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @summary Get Explicit Skills for Skill Enabled
     * @param {WorkersApiGetExplicitSkillsForSkillEnabledRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getExplicitSkillsForSkillEnabled(requestParameters: WorkersApiGetExplicitSkillsForSkillEnabledRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getExplicitSkillsForSkillEnabled(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
     * @param {WorkersApiGetExternalSkillLevelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getExternalSkillLevel(requestParameters: WorkersApiGetExternalSkillLevelRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getExternalSkillLevel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @summary Retrieves all external skill level information for a worker. You can filter the external skill levels by externalSkillId.
     * @param {WorkersApiGetExternalSkillLevelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getExternalSkillLevels(requestParameters: WorkersApiGetExternalSkillLevelsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getExternalSkillLevels(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an existing Home Contact Change event for the Person.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     * @summary Retrieves an existing Home Contact Change event for the Person.
     * @param {WorkersApiGetHomeContactChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getHomeContactChange(requestParameters: WorkersApiGetHomeContactChangeRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getHomeContactChange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about a service date for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
     * @summary Retrieves a single service date information instance.
     * @param {WorkersApiGetServiceDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getServiceDate(requestParameters: WorkersApiGetServiceDateRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getServiceDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all service dates for the specified worker id.  Secured by: Self-Service: Service Dates, Worker Data: Service Dates  Scope: Staffing
     * @summary Retrieves a collection of service dates for the specified worker id.
     * @param {WorkersApiGetServiceDatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getServiceDates(requestParameters: WorkersApiGetServiceDatesRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getServiceDates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param {WorkersApiGetSkillItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getSkillItems(requestParameters: WorkersApiGetSkillItemsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getSkillItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Secured by: Person Data: Skills, Self-Service: Skills  Scope: Worker Profile and Skills
     * @param {WorkersApiGetSkillItemsByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getSkillItemsById(requestParameters: WorkersApiGetSkillItemsByIdRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getSkillItemsById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of workers and current staffing information.  Secured by: Self-Service: Current Staffing Information, Worker Data: Public Worker Reports  Scope: Staffing
     * @summary Retrieves a collection of workers and current staffing information.
     * @param {WorkersApiGetStaffingInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getStaffingInformation(requestParameters: WorkersApiGetStaffingInformationRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getStaffingInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an existing Work Contact Change event for the Person.  Secured by: Change Work Contact Information (REST Service)  Scope: Contact Information
     * @summary Retrieves an existing Work Contact Change event for the Person.
     * @param {WorkersApiGetWorkContactChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public getWorkContactChange(requestParameters: WorkersApiGetWorkContactChangeRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).getWorkContactChange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates a job change request for a specific worker Call this method to start a new job change event, which returns a new job change ID. Use the new ID to reference the job change event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}, reason {id}  To retrieve a worker ID, call the GET /values/jobChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for change job for the current user are returned.  To retrieve a job ID, call the GET /values/jobChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do a job change. You can filter the results by effectiveDate. By default, it returns positions on the current date.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  To retrieve a supervisoryOrganization ID, call the GET /values/jobChangesGroup/supervisoryOrganization prompt endpoint, with proposedManager and effectiveDate query parameters. If you specify the proposedManager parameter, it returns HREF links to all supervisory organizations for that manager. If you specify effectiveDate, it filters the results by effective date. The default is the current date.  To retrieve a location ID, call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the staffingEvent query parameter.  It returns HREF links to locations by location categories for the specified location. You can filter the results by effectiveDate. By default, it returns locations on the current date.  Secured by: Change Job (REST Service)  Scope: Staffing
     * @summary Initiates a job change request for a specific worker
     * @param {WorkersApiInitiateJobChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public initiateJobChange(requestParameters: WorkersApiInitiateJobChangeRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).initiateJobChange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates an organization assignment change for a specific worker. Call this method to start a new change organization assignment event, which returns a new change organization assignment ID. Use the new ID to reference the change organization assignment event in subsequent methods that update or get information about the same event.  The same Workday UI validations apply with this POST method.  The updates in this POST method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify at least this required field: date, worker {id}, job {id}  To retrieve a worker ID, call the GET /values/organizationAssignmentChangesGroup/workers prompt endpoint with the effectiveDate query parameter. It returns HREF links to workers by category. You can filter the results by effectiveDate. By default, it returns workers on the current date. Only workers without blocking events or available for organization assignment change for the current user are returned.  To retrieve a job ID, call the /values/organizationAssignmentChangesGroup/jobs prompt endpoint with the worker query parameter.  It returns all positions for the worker with current user access to do an organization assignment change . You can filter the results by effectiveDate. By default, it returns positions on the current date.  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
     * @summary Initiates an organization assignment change for a specific worker.
     * @param {WorkersApiInitiateOrganizationAssignmentChangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public initiateOrganizationAssignmentChange(requestParameters: WorkersApiInitiateOrganizationAssignmentChangeRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).initiateOrganizationAssignmentChange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-Ins task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
     * @summary Partially updates an existing Check-In to archived or un-archived.
     * @param {WorkersApiPartiallyUpdateCheckInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public partiallyUpdateCheckIn(requestParameters: WorkersApiPartiallyUpdateCheckInRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).partiallyUpdateCheckIn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (name, privateNotes, sharedNotes, checkInTopicAttachments, or associatedCheckIns). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Edit Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @summary Partially updates an existing Check-In topic instance.
     * @param {WorkersApiPartiallyUpdateCheckInTopicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public partiallyUpdateCheckInTopic(requestParameters: WorkersApiPartiallyUpdateCheckInTopicRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).partiallyUpdateCheckInTopic(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save skills a user has  Secured by: Self-Service: Skills  Scope: Worker Profile and Skills
     * @summary Save skills a user has
     * @param {WorkersApiSaveUserSkillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public saveUserSkills(requestParameters: WorkersApiSaveUserSkillsRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).saveUserSkills(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates an existing Check-In instance with the specified ID and the specified data in the request body (date, description, or associated topics). This can only be done by the creator or participant of the Check-In.    This endpoint is equivalent to the Edit Check-In task in Workday.  Secured by: Self-Service: Check-Ins  Scope: Performance Enablement  Contains attachment(s)
     * @summary Partially updates an existing Check-In instance.
     * @param {WorkersApiUpdateCheckInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public updateCheckIn(requestParameters: WorkersApiUpdateCheckInRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).updateCheckIn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates an existing Check-In topic instance with the specified ID and the specified data in the request body (archive). This can only be done by the creator or participant of the Check-In.   This endpoint is equivalent to the Archive Check-In Topic task in Workday.  Secured by: Self-Service: Check-Ins, Worker Data: Check-Ins  Scope: Performance Enablement
     * @summary Partially updates an existing Check-In topic to archived or un-archived.
     * @param {WorkersApiUpdateCheckInTopicStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public updateCheckInTopicState(requestParameters: WorkersApiUpdateCheckInTopicStateRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).updateCheckInTopicState(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates external skill levels.  Secured by: Self-Service: External Skill Source, Worker Data: External Skill Source  Scope: Worker Profile and Skills
     * @summary Updates external skill levels.
     * @param {WorkersApiUpdateExternalSkillLevelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkersApiGenerated
     */
    public updateExternalSkillLevel(requestParameters: WorkersApiUpdateExternalSkillLevelRequest, options?: AxiosRequestConfig) {
        return WorkersApiFp(this.configuration).updateExternalSkillLevel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
