/* tslint:disable */
/* eslint-disable */
/*
staffing

The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.



Related Information:
- Administrator Guide: Setup Considerations: Job Changes

The version of the OpenAPI document: v6


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AssignmentType23929e1f68ca10000d6940d6bde56963 } from '../models';
// @ts-ignore
import { BusinessProcessParameters5afc0b4b5a4610002aaebb8180cd2261 } from '../models';
// @ts-ignore
import { ChangeJobAdditionalJobClassificationData27ec818d10d0100003600115b5200102 } from '../models';
// @ts-ignore
import { ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea } from '../models';
// @ts-ignore
import { ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 } from '../models';
// @ts-ignore
import { ChangeJobCompanyInsiderTypesData05d4c45042b61000131e4b2132f30137 } from '../models';
// @ts-ignore
import { ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 } from '../models';
// @ts-ignore
import { ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7 } from '../models';
// @ts-ignore
import { ChangeJobJobClassificationData354103f196361000084489bcb281017f } from '../models';
// @ts-ignore
import { ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 } from '../models';
// @ts-ignore
import { ChangeJobLocation90151d6c4ff110001b4a46091678025c } from '../models';
// @ts-ignore
import { ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 } from '../models';
// @ts-ignore
import { ChangeJobOpeningData97af9049a5fd10001c4888d654170000 } from '../models';
// @ts-ignore
import { ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 } from '../models';
// @ts-ignore
import { Comments7d98fd55aeee100022968e52a1b31c60 } from '../models';
// @ts-ignore
import { Currency2d0ca2cb2448100009c54386a8570e07 } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { EventState54e611eca2c910000fbc4579181c0111 } from '../models';
// @ts-ignore
import { Frequency2d0ca2cb2448100009c5436d5d670e06 } from '../models';
// @ts-ignore
import { HeadcountOption97af9049a5fd10001c48896fbde30000 } from '../models';
// @ts-ignore
import { Job35b8f199c29410002508ffd7ad6101f3 } from '../models';
// @ts-ignore
import { JobChangesGetAdministrativeOptionsResponse } from '../models';
// @ts-ignore
import { JobChangesGetBusinessTitleResponse } from '../models';
// @ts-ignore
import { JobChangesGetCommentByIdResponse } from '../models';
// @ts-ignore
import { JobChangesGetContractOptionsResponse } from '../models';
// @ts-ignore
import { JobChangesGetJobClassificationResponse } from '../models';
// @ts-ignore
import { JobChangesGetJobProfileResponse } from '../models';
// @ts-ignore
import { JobChangesGetLocationInfoResponse } from '../models';
// @ts-ignore
import { JobChangesGetMoveTeamOptionResponse } from '../models';
// @ts-ignore
import { JobChangesGetOpeningOptionsResponse } from '../models';
// @ts-ignore
import { JobChangesGetPositionByIdResponse } from '../models';
// @ts-ignore
import { JobChangesGetStartDetailsResponse } from '../models';
// @ts-ignore
import { JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 } from '../models';
// @ts-ignore
import { JobProfile3db8095ffa18100013f019afc6d30116 } from '../models';
// @ts-ignore
import { JobRequisitionDfc4e58f730810001ad60325d9bc52cf } from '../models';
// @ts-ignore
import { Location6da81665c26510001fc6b1d42fae5f7b } from '../models';
// @ts-ignore
import { Location90151d6c4ff110001bfa027116820278 } from '../models';
// @ts-ignore
import { PayRateTypeD25283821c01100016756a14eb650000 } from '../models';
// @ts-ignore
import { PositionDfc4e58f730810001ad60369c23452d1 } from '../models';
// @ts-ignore
import { PositionWorkerType05d4c45042b610001030ee47f2c90118 } from '../models';
// @ts-ignore
import { PurchaseOrder2d0ca2cb2448100009c5433bcff60e05 } from '../models';
// @ts-ignore
import { Reason6da81665c26510001f34d0a154765e9b } from '../models';
// @ts-ignore
import { Status54e611eca2c910000fbc4599be0b0112 } from '../models';
// @ts-ignore
import { SupervisoryOrganizationE3267ea37e6f100032c00c34a99e74d8 } from '../models';
// @ts-ignore
import { Template2b1b95dfe4af100009f30dc769a31686 } from '../models';
// @ts-ignore
import { TimeType05d4c45042b610000bb540b7458e0108 } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { WorkShift0ee7bb8b41db1000143d4e4822174f2e } from '../models';
// @ts-ignore
import { WorkSpace0ee7bb8b41db10001e7db6a6c3e55663 } from '../models';
// @ts-ignore
import { WorkStudy05d4c45042b610000ba2f83c70f30101 } from '../models';
// @ts-ignore
import { Worker271bbd673582100010110b9f9a6d99e1 } from '../models';
// @ts-ignore
import { WorkersCompensationCodeOverride05d4c45042b61000138500e185e0013f } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * JobChangesApi - axios parameter creator
 * @export
 */
export const JobChangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Retrieves the administrative options for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminOptions: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAdminOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getAdminOptions', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/administrative/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/administrative/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Retrieves the administrative options for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdministrativeOptions: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getAdministrativeOptions', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/administrative`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/administrative',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Retrieves a business title for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTitle: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getBusinessTitle', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getBusinessTitle', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/businessTitle/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/businessTitle/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Retrieves a business title for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTitle_1: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getBusinessTitle_1', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/businessTitle`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/businessTitle',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a change job event with the specified ID.  Secured by: Change Job (Mass Action), Change Job (REST Service), Staffing Actions, Staffing Actions: Academic Pay, Staffing Actions: Additional Job Classifications, Staffing Actions: Administrator, Staffing Actions: Attachments, Staffing Actions: Business Title, Staffing Actions: Change Job Date and Reason, Staffing Actions: Compensation for All Job Profiles, Staffing Actions: Contract Details, Staffing Actions: Hire Student, Staffing Actions: Job Profile, Staffing Actions: View \\~Worker\\~ Start Date Correction  Scope: Staffing
         * @summary Retrieves a single change job event instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getById', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Returns the comment information for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentById: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCommentById', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/comment`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/comment',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Returns the comment information for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentInfo: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCommentInfo', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCommentInfo', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/comment/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/comment/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Retrieves the contract options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractOptions: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getContractOptions', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/contract`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/contract',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Retrieves the contract options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractOptions_2: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getContractOptions_2', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getContractOptions_2', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/contract/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/contract/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Retrieves a job classification for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobClassification: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getJobClassification', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/jobClassification`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/jobClassification',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Retrieves a job classification for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobClassification_3: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getJobClassification_3', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getJobClassification_3', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/jobClassification/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/jobClassification/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Retrieves a job profile for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobProfile: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getJobProfile', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/jobProfile`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/jobProfile',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Returns the location information for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationInfo: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getLocationInfo', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/location`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/location',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Returns the location information for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationInfo_4: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getLocationInfo_4', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getLocationInfo_4', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/location/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/location/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Retrieves a move team option from the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoveTeamOption: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getMoveTeamOption', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getMoveTeamOption', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/moveTeam/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/moveTeam/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Retrieves a move team option from the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoveTeamOption_5: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getMoveTeamOption_5', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/moveTeam`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/moveTeam',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the opening options for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningOptions: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getOpeningOptions', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/opening`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/opening',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the opening options for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningOptions_6: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getOpeningOptions_6', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getOpeningOptions_6', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/opening/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/opening/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Retrieves a position for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionById: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPositionById', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/position`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/position',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Retrieves a position for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionBySubresourceId: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getPositionBySubresourceId', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getPositionBySubresourceId', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/position/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/position/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Retrieves a job profile for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getProfile', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getProfile', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/jobProfile/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/jobProfile/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the start details for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStartDetails', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getStartDetails', 'subresourceID', subresourceID)
            const localVarPath = `/jobChanges/{ID}/startDetails/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/startDetails/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the start details for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails_7: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStartDetails_7', 'iD', iD)
            const localVarPath = `/jobChanges/{ID}/startDetails`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/startDetails',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the location options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/location/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this request field: location{id}.   To retrieve a location ID, you can call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to locations by location categories for the staffingEvent. You can filter the results by effectiveDate. By default, it returns locations on the current date.   To retrieve a workShift ID, call the GET /values/jobChangesGroup/workShifts prompt endpoint with the location query parameter. It returns work shifts by location. If you don\'t specify the location parameter, it returns an empty result.  To retrieve a workSpace ID, call the GET /values/jobChangesGroup/workSpaces prompt endpoint with the location query parameter. It returns HREF links to workspaces by configured prompt categories for the specified location. You can filter the results by effectiveDate. By default, it returns workspaces on the current date.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Partially updates the location options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobLocation90151d6c4ff110001b4a46091678025c} changeJobLocation90151d6c4ff110001b4a46091678025c 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateLocationOptions: async (iD: string, subresourceID: string, changeJobLocation90151d6c4ff110001b4a46091678025c: ChangeJobLocation90151d6c4ff110001b4a46091678025c, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('partialUpdateLocationOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('partialUpdateLocationOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobLocation90151d6c4ff110001b4a46091678025c' is not null or undefined
            assertParamExists('partialUpdateLocationOptions', 'changeJobLocation90151d6c4ff110001b4a46091678025c', changeJobLocation90151d6c4ff110001b4a46091678025c)
            const localVarPath = `/jobChanges/{ID}/location/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobLocation90151d6c4ff110001b4a46091678025c,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/location/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobLocation90151d6c4ff110001b4a46091678025c, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the contract details options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/contract/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.   To retrieve a frequency ID, call the GET /values/jobChangesGroup/frequencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all frequencies based on staffing event for contingent workers. By default, it returns all frequencies in the tenant.  To retrieve a currency ID, call the GET /values/jobChangesGroup/currencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to active currencies by prompt category. By default, it returns all active currencies.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Partially updates the contract options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107} changeJobContractDetailsData27ec818d10d010000386ce823ac20107 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateContractOptions: async (iD: string, subresourceID: string, changeJobContractDetailsData27ec818d10d010000386ce823ac20107: ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('partiallyUpdateContractOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('partiallyUpdateContractOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobContractDetailsData27ec818d10d010000386ce823ac20107' is not null or undefined
            assertParamExists('partiallyUpdateContractOptions', 'changeJobContractDetailsData27ec818d10d010000386ce823ac20107', changeJobContractDetailsData27ec818d10d010000386ce823ac20107)
            const localVarPath = `/jobChanges/{ID}/contract/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobContractDetailsData27ec818d10d010000386ce823ac20107,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/contract/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobContractDetailsData27ec818d10d010000386ce823ac20107, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits the specified change job ID.   To submit the Change Job event and initiate the Change Job business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the \"Save for Later\" action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Change Job event using the REST APIs. The user with correct permissions can edit and submit the saved Change Job event in the Workday UI.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Submit the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {EventState54e611eca2c910000fbc4579181c0111} eventState54e611eca2c910000fbc4579181c0111 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitChangeJob: async (iD: string, eventState54e611eca2c910000fbc4579181c0111: EventState54e611eca2c910000fbc4579181c0111, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('submitChangeJob', 'iD', iD)
            // verify required parameter 'eventState54e611eca2c910000fbc4579181c0111' is not null or undefined
            assertParamExists('submitChangeJob', 'eventState54e611eca2c910000fbc4579181c0111', eventState54e611eca2c910000fbc4579181c0111)
            const localVarPath = `/jobChanges/{ID}/submit`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventState54e611eca2c910000fbc4579181c0111,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/submit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventState54e611eca2c910000fbc4579181c0111, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the administrative options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/administrative/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Note that there are no localization constraints in this API version. You can update the workingFTE and paidFTE fields even if the fields have not been localized.  To retrieve a positionWorkerType ID, you can call the GET /values/jobChangesGroup/employeeTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to employee types by country. By default, it returns all employee types, excluding contingent workers.  For the positionWorkerType ID, you can also call the GET /values/jobChangesGroup/contingentWorkerTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to contingent worker types for staffing event. If you specify location, it returns HREF links to contingent worker types by location or country. By default, it returns all contingent worker types.  To retrieve a workersCompensationCodeOverride ID, call the GET /values/jobChangesGroup/workersCompensationCodeOverrides prompt endpoint, which takes the job change ID as the staffing Event query parameter.   To retrieve a payRateType ID, call the GET /values/jobChangesGroup/payRateTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all pay rate types based on staffing event for contingent workers. By default, it returns all pay rate types in the tenant.   To retrieve companyInsiderType IDs, call the GET /values/jobChangesGroup/companyInsiderTypes prompt endpoint, which returns all company insider types in the tenant.   To retrieve an assignmentType ID, call the GET /values/jobChangesGroup/assignmentTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns assignmentTypes for the staffingEvent. By default, it returns all active assignment types.  To retrieve a workStudy ID, call the GET /values/jobChangesGroup/workStudyAwards prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns work study awards for the staffingEvent. By default, it returns all work studies in the tenant.  To retrieve a timeType ID, call the GET /values/jobChangesGroup/timeTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns time types for the staffingEvent. By default, it returns all time types based on the Relax Hiring Restrictions tenant configuration.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Partially updates the administrative options for the specified job change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea} changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdministrativeOptions: async (iD: string, subresourceID: string, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea: ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateAdministrativeOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateAdministrativeOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea' is not null or undefined
            assertParamExists('updateAdministrativeOptions', 'changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea', changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea)
            const localVarPath = `/jobChanges/{ID}/administrative/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/administrative/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the businessTitle options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/businessTitle/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Partially updates the businessTitle options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102} changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessTitleOptions: async (iD: string, subresourceID: string, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102: ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateBusinessTitleOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateBusinessTitleOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102' is not null or undefined
            assertParamExists('updateBusinessTitleOptions', 'changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102', changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102)
            const localVarPath = `/jobChanges/{ID}/businessTitle/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/businessTitle/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the comment for the specified change job ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  You can call GET /jobChanges/{ID}/comment/{subResourceID} to get the existing data to update.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Partially updates the comment for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {Comments7d98fd55aeee100022968e52a1b31c60} comments7d98fd55aeee100022968e52a1b31c60 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment: async (iD: string, subresourceID: string, comments7d98fd55aeee100022968e52a1b31c60: Comments7d98fd55aeee100022968e52a1b31c60, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateComment', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateComment', 'subresourceID', subresourceID)
            // verify required parameter 'comments7d98fd55aeee100022968e52a1b31c60' is not null or undefined
            assertParamExists('updateComment', 'comments7d98fd55aeee100022968e52a1b31c60', comments7d98fd55aeee100022968e52a1b31c60)
            const localVarPath = `/jobChanges/{ID}/comment/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: comments7d98fd55aeee100022968e52a1b31c60,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/comment/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(comments7d98fd55aeee100022968e52a1b31c60, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the job classifications for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobClassification/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: additionalJobClassifications[ {id} ].   To retrieve an additionalJobClassifications ID, call the GET /values/jobChangesGroup/jobClassifications prompt endpoint with the location and/or staffingEvent query parameter. It returns HREF links to job classifications by location for the staffing event. It returns an empty result if both location and staffingEvent are not specified. You can filter the results by effectiveDate. By default, it returns job classifications on the current date.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Partially updates the jobClassification options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobJobClassificationData354103f196361000084489bcb281017f} changeJobJobClassificationData354103f196361000084489bcb281017f 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobClassificationOptions: async (iD: string, subresourceID: string, changeJobJobClassificationData354103f196361000084489bcb281017f: ChangeJobJobClassificationData354103f196361000084489bcb281017f, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateJobClassificationOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateJobClassificationOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobJobClassificationData354103f196361000084489bcb281017f' is not null or undefined
            assertParamExists('updateJobClassificationOptions', 'changeJobJobClassificationData354103f196361000084489bcb281017f', changeJobJobClassificationData354103f196361000084489bcb281017f)
            const localVarPath = `/jobChanges/{ID}/jobClassification/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobJobClassificationData354103f196361000084489bcb281017f,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/jobClassification/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobJobClassificationData354103f196361000084489bcb281017f, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the job profile options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobProfile/{subResourceID} to get the existing data to update.  The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: jobProfile{id}  To retrieve a jobProfile ID, call the GET /values/jobChangesGroup/jobProfiles prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to the job profiles by the prompt category. If you don\'t specify the staffingEvent parameter, it returns all job profiles, regardless of their categories. You can also filter the job profiles by the effectiveDate query parameter. The default is the current date.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Partially updates the jobProfile options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115} changeJobJobProfileData3db8095ffa18100013f019a27a1f0115 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobProfileOptions: async (iD: string, subresourceID: string, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115: ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateJobProfileOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateJobProfileOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobJobProfileData3db8095ffa18100013f019a27a1f0115' is not null or undefined
            assertParamExists('updateJobProfileOptions', 'changeJobJobProfileData3db8095ffa18100013f019a27a1f0115', changeJobJobProfileData3db8095ffa18100013f019a27a1f0115)
            const localVarPath = `/jobChanges/{ID}/jobProfile/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobJobProfileData3db8095ffa18100013f019a27a1f0115,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/jobProfile/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the moveTeam options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/moveTeam/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Partially updates the moveTeam options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146} changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMoveTeamOptions: async (iD: string, subresourceID: string, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146: ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateMoveTeamOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateMoveTeamOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146' is not null or undefined
            assertParamExists('updateMoveTeamOptions', 'changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146', changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146)
            const localVarPath = `/jobChanges/{ID}/moveTeam/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/moveTeam/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the opening options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/opening/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: headcountOption{id}   To retrieve a headcountOption ID, call the GET /values/jobChangesGroup/headcountOptions prompt endpoint, which takes the job change ID as the staffingEvent query parameter. By default, it returns all headcount options.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Partially updates the opening options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobOpeningData97af9049a5fd10001c4888d654170000} changeJobOpeningData97af9049a5fd10001c4888d654170000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOpeningOptions: async (iD: string, subresourceID: string, changeJobOpeningData97af9049a5fd10001c4888d654170000: ChangeJobOpeningData97af9049a5fd10001c4888d654170000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateOpeningOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateOpeningOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobOpeningData97af9049a5fd10001c4888d654170000' is not null or undefined
            assertParamExists('updateOpeningOptions', 'changeJobOpeningData97af9049a5fd10001c4888d654170000', changeJobOpeningData97af9049a5fd10001c4888d654170000)
            const localVarPath = `/jobChanges/{ID}/opening/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobOpeningData97af9049a5fd10001c4888d654170000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/opening/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobOpeningData97af9049a5fd10001c4888d654170000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the position options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: position{id}, createPosition, closePosition, availableForOverlap  To retrieve a position ID, call the GET /values/jobChangesGroup/proposedPosition prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to proposed positions based on staffing event for contingent workers. You can filter the results by effectiveDate. By default, it returns all proposed positions on current date.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Partially updates the position options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221} changeJobPositionDataDfc4e58f7308100018bd1c459f435221 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePositionOptions: async (iD: string, subresourceID: string, changeJobPositionDataDfc4e58f7308100018bd1c459f435221: ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updatePositionOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updatePositionOptions', 'subresourceID', subresourceID)
            // verify required parameter 'changeJobPositionDataDfc4e58f7308100018bd1c459f435221' is not null or undefined
            assertParamExists('updatePositionOptions', 'changeJobPositionDataDfc4e58f7308100018bd1c459f435221', changeJobPositionDataDfc4e58f7308100018bd1c459f435221)
            const localVarPath = `/jobChanges/{ID}/position/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: changeJobPositionDataDfc4e58f7308100018bd1c459f435221,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/position/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(changeJobPositionDataDfc4e58f7308100018bd1c459f435221, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the start details for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: date, reason{id}.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Partially updates the startDetails options for the specified change job ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020} jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStartDetails: async (iD: string, subresourceID: string, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020: JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateStartDetails', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateStartDetails', 'subresourceID', subresourceID)
            // verify required parameter 'jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020' is not null or undefined
            assertParamExists('updateStartDetails', 'jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020', jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020)
            const localVarPath = `/jobChanges/{ID}/startDetails/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobChanges/{ID}/startDetails/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobChangesApi - functional programming interface
 * @export
 */
export const JobChangesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobChangesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Retrieves the administrative options for the specified job change ID.
         * @param {JobChangesApiGetAdminOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminOptions(requestParameters: JobChangesApiGetAdminOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdminOptions(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Retrieves the administrative options for the specified job change ID.
         * @param {JobChangesApiGetAdministrativeOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdministrativeOptions(requestParameters: JobChangesApiGetAdministrativeOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetAdministrativeOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdministrativeOptions(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Retrieves a business title for the specified job change ID.
         * @param {JobChangesApiGetBusinessTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessTitle(requestParameters: JobChangesApiGetBusinessTitleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessTitle(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Retrieves a business title for the specified job change ID.
         * @param {JobChangesApiGetBusinessTitle0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessTitle_1(requestParameters: JobChangesApiGetBusinessTitle0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetBusinessTitleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessTitle_1(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a change job event with the specified ID.  Secured by: Change Job (Mass Action), Change Job (REST Service), Staffing Actions, Staffing Actions: Academic Pay, Staffing Actions: Additional Job Classifications, Staffing Actions: Administrator, Staffing Actions: Attachments, Staffing Actions: Business Title, Staffing Actions: Change Job Date and Reason, Staffing Actions: Compensation for All Job Profiles, Staffing Actions: Contract Details, Staffing Actions: Hire Student, Staffing Actions: Job Profile, Staffing Actions: View \\~Worker\\~ Start Date Correction  Scope: Staffing
         * @summary Retrieves a single change job event instance.
         * @param {JobChangesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: JobChangesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Returns the comment information for the specified job change ID.
         * @param {JobChangesApiGetCommentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommentById(requestParameters: JobChangesApiGetCommentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetCommentByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentById(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Returns the comment information for the specified job change ID.
         * @param {JobChangesApiGetCommentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommentInfo(requestParameters: JobChangesApiGetCommentInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentInfo(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Retrieves the contract options for the specified change job ID.
         * @param {JobChangesApiGetContractOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractOptions(requestParameters: JobChangesApiGetContractOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetContractOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractOptions(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Retrieves the contract options for the specified change job ID.
         * @param {JobChangesApiGetContractOptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractOptions_2(requestParameters: JobChangesApiGetContractOptions0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractOptions_2(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Retrieves a job classification for the specified job change ID.
         * @param {JobChangesApiGetJobClassificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobClassification(requestParameters: JobChangesApiGetJobClassificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetJobClassificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobClassification(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Retrieves a job classification for the specified job change ID.
         * @param {JobChangesApiGetJobClassification0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobClassification_3(requestParameters: JobChangesApiGetJobClassification0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobJobClassificationData354103f196361000084489bcb281017f>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobClassification_3(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Retrieves a job profile for the specified job change ID.
         * @param {JobChangesApiGetJobProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobProfile(requestParameters: JobChangesApiGetJobProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetJobProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobProfile(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Returns the location information for the specified job change ID.
         * @param {JobChangesApiGetLocationInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationInfo(requestParameters: JobChangesApiGetLocationInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetLocationInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationInfo(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Returns the location information for the specified job change ID.
         * @param {JobChangesApiGetLocationInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLocationInfo_4(requestParameters: JobChangesApiGetLocationInfo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobLocation90151d6c4ff110001b4a46091678025c>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLocationInfo_4(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Retrieves a move team option from the specified job change ID.
         * @param {JobChangesApiGetMoveTeamOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMoveTeamOption(requestParameters: JobChangesApiGetMoveTeamOptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMoveTeamOption(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Retrieves a move team option from the specified job change ID.
         * @param {JobChangesApiGetMoveTeamOption0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMoveTeamOption_5(requestParameters: JobChangesApiGetMoveTeamOption0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetMoveTeamOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMoveTeamOption_5(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the opening options for the specified job change ID.
         * @param {JobChangesApiGetOpeningOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpeningOptions(requestParameters: JobChangesApiGetOpeningOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetOpeningOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpeningOptions(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the opening options for the specified job change ID.
         * @param {JobChangesApiGetOpeningOptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpeningOptions_6(requestParameters: JobChangesApiGetOpeningOptions0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobOpeningData97af9049a5fd10001c4888d654170000>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpeningOptions_6(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Retrieves a position for the specified job change ID.
         * @param {JobChangesApiGetPositionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositionById(requestParameters: JobChangesApiGetPositionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetPositionByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositionById(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Retrieves a position for the specified job change ID.
         * @param {JobChangesApiGetPositionBySubresourceIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPositionBySubresourceId(requestParameters: JobChangesApiGetPositionBySubresourceIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPositionBySubresourceId(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Retrieves a job profile for the specified job change ID.
         * @param {JobChangesApiGetProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(requestParameters: JobChangesApiGetProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the start details for the specified job change ID.
         * @param {JobChangesApiGetStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStartDetails(requestParameters: JobChangesApiGetStartDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStartDetails(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the start details for the specified job change ID.
         * @param {JobChangesApiGetStartDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStartDetails_7(requestParameters: JobChangesApiGetStartDetails0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesGetStartDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStartDetails_7(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the location options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/location/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this request field: location{id}.   To retrieve a location ID, you can call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to locations by location categories for the staffingEvent. You can filter the results by effectiveDate. By default, it returns locations on the current date.   To retrieve a workShift ID, call the GET /values/jobChangesGroup/workShifts prompt endpoint with the location query parameter. It returns work shifts by location. If you don\'t specify the location parameter, it returns an empty result.  To retrieve a workSpace ID, call the GET /values/jobChangesGroup/workSpaces prompt endpoint with the location query parameter. It returns HREF links to workspaces by configured prompt categories for the specified location. You can filter the results by effectiveDate. By default, it returns workspaces on the current date.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Partially updates the location options for the specified change job ID.
         * @param {JobChangesApiPartialUpdateLocationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateLocationOptions(requestParameters: JobChangesApiPartialUpdateLocationOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobLocation90151d6c4ff110001b4a46091678025c>> {
            const changeJobLocation90151d6c4ff110001b4a46091678025c: ChangeJobLocation90151d6c4ff110001b4a46091678025c = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdateLocationOptions(requestParameters.iD, requestParameters.subresourceID, changeJobLocation90151d6c4ff110001b4a46091678025c, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the contract details options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/contract/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.   To retrieve a frequency ID, call the GET /values/jobChangesGroup/frequencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all frequencies based on staffing event for contingent workers. By default, it returns all frequencies in the tenant.  To retrieve a currency ID, call the GET /values/jobChangesGroup/currencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to active currencies by prompt category. By default, it returns all active currencies.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Partially updates the contract options for the specified change job ID.
         * @param {JobChangesApiPartiallyUpdateContractOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdateContractOptions(requestParameters: JobChangesApiPartiallyUpdateContractOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107>> {
            const changeJobContractDetailsData27ec818d10d010000386ce823ac20107: ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdateContractOptions(requestParameters.iD, requestParameters.subresourceID, changeJobContractDetailsData27ec818d10d010000386ce823ac20107, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits the specified change job ID.   To submit the Change Job event and initiate the Change Job business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the \"Save for Later\" action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Change Job event using the REST APIs. The user with correct permissions can edit and submit the saved Change Job event in the Workday UI.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Submit the specified change job ID.
         * @param {JobChangesApiSubmitChangeJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitChangeJob(requestParameters: JobChangesApiSubmitChangeJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventState54e611eca2c910000fbc4579181c0111>> {
            const eventState54e611eca2c910000fbc4579181c0111: EventState54e611eca2c910000fbc4579181c0111 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitChangeJob(requestParameters.iD, eventState54e611eca2c910000fbc4579181c0111, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the administrative options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/administrative/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Note that there are no localization constraints in this API version. You can update the workingFTE and paidFTE fields even if the fields have not been localized.  To retrieve a positionWorkerType ID, you can call the GET /values/jobChangesGroup/employeeTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to employee types by country. By default, it returns all employee types, excluding contingent workers.  For the positionWorkerType ID, you can also call the GET /values/jobChangesGroup/contingentWorkerTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to contingent worker types for staffing event. If you specify location, it returns HREF links to contingent worker types by location or country. By default, it returns all contingent worker types.  To retrieve a workersCompensationCodeOverride ID, call the GET /values/jobChangesGroup/workersCompensationCodeOverrides prompt endpoint, which takes the job change ID as the staffing Event query parameter.   To retrieve a payRateType ID, call the GET /values/jobChangesGroup/payRateTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all pay rate types based on staffing event for contingent workers. By default, it returns all pay rate types in the tenant.   To retrieve companyInsiderType IDs, call the GET /values/jobChangesGroup/companyInsiderTypes prompt endpoint, which returns all company insider types in the tenant.   To retrieve an assignmentType ID, call the GET /values/jobChangesGroup/assignmentTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns assignmentTypes for the staffingEvent. By default, it returns all active assignment types.  To retrieve a workStudy ID, call the GET /values/jobChangesGroup/workStudyAwards prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns work study awards for the staffingEvent. By default, it returns all work studies in the tenant.  To retrieve a timeType ID, call the GET /values/jobChangesGroup/timeTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns time types for the staffingEvent. By default, it returns all time types based on the Relax Hiring Restrictions tenant configuration.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Partially updates the administrative options for the specified job change ID.
         * @param {JobChangesApiUpdateAdministrativeOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdministrativeOptions(requestParameters: JobChangesApiUpdateAdministrativeOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea>> {
            const changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea: ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdministrativeOptions(requestParameters.iD, requestParameters.subresourceID, changeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the businessTitle options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/businessTitle/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Partially updates the businessTitle options for the specified change job ID.
         * @param {JobChangesApiUpdateBusinessTitleOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessTitleOptions(requestParameters: JobChangesApiUpdateBusinessTitleOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102>> {
            const changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102: ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessTitleOptions(requestParameters.iD, requestParameters.subresourceID, changeJobBusinessTitle3db8095ffa18100013a5f96969ca0102, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the comment for the specified change job ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  You can call GET /jobChanges/{ID}/comment/{subResourceID} to get the existing data to update.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Partially updates the comment for the specified change job ID.
         * @param {JobChangesApiUpdateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComment(requestParameters: JobChangesApiUpdateCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60>> {
            const comments7d98fd55aeee100022968e52a1b31c60: Comments7d98fd55aeee100022968e52a1b31c60 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComment(requestParameters.iD, requestParameters.subresourceID, comments7d98fd55aeee100022968e52a1b31c60, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the job classifications for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobClassification/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: additionalJobClassifications[ {id} ].   To retrieve an additionalJobClassifications ID, call the GET /values/jobChangesGroup/jobClassifications prompt endpoint with the location and/or staffingEvent query parameter. It returns HREF links to job classifications by location for the staffing event. It returns an empty result if both location and staffingEvent are not specified. You can filter the results by effectiveDate. By default, it returns job classifications on the current date.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Partially updates the jobClassification options for the specified change job ID.
         * @param {JobChangesApiUpdateJobClassificationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJobClassificationOptions(requestParameters: JobChangesApiUpdateJobClassificationOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobJobClassificationData354103f196361000084489bcb281017f>> {
            const changeJobJobClassificationData354103f196361000084489bcb281017f: ChangeJobJobClassificationData354103f196361000084489bcb281017f = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJobClassificationOptions(requestParameters.iD, requestParameters.subresourceID, changeJobJobClassificationData354103f196361000084489bcb281017f, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the job profile options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobProfile/{subResourceID} to get the existing data to update.  The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: jobProfile{id}  To retrieve a jobProfile ID, call the GET /values/jobChangesGroup/jobProfiles prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to the job profiles by the prompt category. If you don\'t specify the staffingEvent parameter, it returns all job profiles, regardless of their categories. You can also filter the job profiles by the effectiveDate query parameter. The default is the current date.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Partially updates the jobProfile options for the specified change job ID.
         * @param {JobChangesApiUpdateJobProfileOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateJobProfileOptions(requestParameters: JobChangesApiUpdateJobProfileOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115>> {
            const changeJobJobProfileData3db8095ffa18100013f019a27a1f0115: ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateJobProfileOptions(requestParameters.iD, requestParameters.subresourceID, changeJobJobProfileData3db8095ffa18100013f019a27a1f0115, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the moveTeam options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/moveTeam/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Partially updates the moveTeam options for the specified change job ID.
         * @param {JobChangesApiUpdateMoveTeamOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMoveTeamOptions(requestParameters: JobChangesApiUpdateMoveTeamOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146>> {
            const changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146: ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMoveTeamOptions(requestParameters.iD, requestParameters.subresourceID, changeJobMoveTeamData544fdf5c01da1000238ad82d26d90146, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the opening options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/opening/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: headcountOption{id}   To retrieve a headcountOption ID, call the GET /values/jobChangesGroup/headcountOptions prompt endpoint, which takes the job change ID as the staffingEvent query parameter. By default, it returns all headcount options.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Partially updates the opening options for the specified change job ID.
         * @param {JobChangesApiUpdateOpeningOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOpeningOptions(requestParameters: JobChangesApiUpdateOpeningOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobOpeningData97af9049a5fd10001c4888d654170000>> {
            const changeJobOpeningData97af9049a5fd10001c4888d654170000: ChangeJobOpeningData97af9049a5fd10001c4888d654170000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOpeningOptions(requestParameters.iD, requestParameters.subresourceID, changeJobOpeningData97af9049a5fd10001c4888d654170000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the position options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: position{id}, createPosition, closePosition, availableForOverlap  To retrieve a position ID, call the GET /values/jobChangesGroup/proposedPosition prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to proposed positions based on staffing event for contingent workers. You can filter the results by effectiveDate. By default, it returns all proposed positions on current date.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Partially updates the position options for the specified change job ID.
         * @param {JobChangesApiUpdatePositionOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePositionOptions(requestParameters: JobChangesApiUpdatePositionOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221>> {
            const changeJobPositionDataDfc4e58f7308100018bd1c459f435221: ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePositionOptions(requestParameters.iD, requestParameters.subresourceID, changeJobPositionDataDfc4e58f7308100018bd1c459f435221, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the start details for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: date, reason{id}.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Partially updates the startDetails options for the specified change job ID.
         * @param {JobChangesApiUpdateStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStartDetails(requestParameters: JobChangesApiUpdateStartDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020>> {
            const jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020: JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStartDetails(requestParameters.iD, requestParameters.subresourceID, jobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobChangesApi - factory interface
 * @export
 */
export const JobChangesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobChangesApiFp(configuration)
    return {
        /**
         * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Retrieves the administrative options for the specified job change ID.
         * @param {JobChangesApiGetAdminOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminOptions(requestParameters: JobChangesApiGetAdminOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> {
            return localVarFp.getAdminOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Retrieves the administrative options for the specified job change ID.
         * @param {JobChangesApiGetAdministrativeOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdministrativeOptions(requestParameters: JobChangesApiGetAdministrativeOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetAdministrativeOptionsResponse> {
            return localVarFp.getAdministrativeOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Retrieves a business title for the specified job change ID.
         * @param {JobChangesApiGetBusinessTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTitle(requestParameters: JobChangesApiGetBusinessTitleRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> {
            return localVarFp.getBusinessTitle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Retrieves a business title for the specified job change ID.
         * @param {JobChangesApiGetBusinessTitle0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTitle_1(requestParameters: JobChangesApiGetBusinessTitle0Request, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetBusinessTitleResponse> {
            return localVarFp.getBusinessTitle_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a change job event with the specified ID.  Secured by: Change Job (Mass Action), Change Job (REST Service), Staffing Actions, Staffing Actions: Academic Pay, Staffing Actions: Additional Job Classifications, Staffing Actions: Administrator, Staffing Actions: Attachments, Staffing Actions: Business Title, Staffing Actions: Change Job Date and Reason, Staffing Actions: Compensation for All Job Profiles, Staffing Actions: Contract Details, Staffing Actions: Hire Student, Staffing Actions: Job Profile, Staffing Actions: View \\~Worker\\~ Start Date Correction  Scope: Staffing
         * @summary Retrieves a single change job event instance.
         * @param {JobChangesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: JobChangesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobDefaultRepresentation6cc31ee444d010000bb4153a954300e7> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Returns the comment information for the specified job change ID.
         * @param {JobChangesApiGetCommentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentById(requestParameters: JobChangesApiGetCommentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetCommentByIdResponse> {
            return localVarFp.getCommentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Returns the comment information for the specified job change ID.
         * @param {JobChangesApiGetCommentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentInfo(requestParameters: JobChangesApiGetCommentInfoRequest, options?: AxiosRequestConfig): AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60> {
            return localVarFp.getCommentInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Retrieves the contract options for the specified change job ID.
         * @param {JobChangesApiGetContractOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractOptions(requestParameters: JobChangesApiGetContractOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetContractOptionsResponse> {
            return localVarFp.getContractOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Retrieves the contract options for the specified change job ID.
         * @param {JobChangesApiGetContractOptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractOptions_2(requestParameters: JobChangesApiGetContractOptions0Request, options?: AxiosRequestConfig): AxiosPromise<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> {
            return localVarFp.getContractOptions_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Retrieves a job classification for the specified job change ID.
         * @param {JobChangesApiGetJobClassificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobClassification(requestParameters: JobChangesApiGetJobClassificationRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetJobClassificationResponse> {
            return localVarFp.getJobClassification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Retrieves a job classification for the specified job change ID.
         * @param {JobChangesApiGetJobClassification0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobClassification_3(requestParameters: JobChangesApiGetJobClassification0Request, options?: AxiosRequestConfig): AxiosPromise<ChangeJobJobClassificationData354103f196361000084489bcb281017f> {
            return localVarFp.getJobClassification_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Retrieves a job profile for the specified job change ID.
         * @param {JobChangesApiGetJobProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobProfile(requestParameters: JobChangesApiGetJobProfileRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetJobProfileResponse> {
            return localVarFp.getJobProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Returns the location information for the specified job change ID.
         * @param {JobChangesApiGetLocationInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationInfo(requestParameters: JobChangesApiGetLocationInfoRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetLocationInfoResponse> {
            return localVarFp.getLocationInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Returns the location information for the specified job change ID.
         * @param {JobChangesApiGetLocationInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLocationInfo_4(requestParameters: JobChangesApiGetLocationInfo0Request, options?: AxiosRequestConfig): AxiosPromise<ChangeJobLocation90151d6c4ff110001b4a46091678025c> {
            return localVarFp.getLocationInfo_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Retrieves a move team option from the specified job change ID.
         * @param {JobChangesApiGetMoveTeamOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoveTeamOption(requestParameters: JobChangesApiGetMoveTeamOptionRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> {
            return localVarFp.getMoveTeamOption(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Retrieves a move team option from the specified job change ID.
         * @param {JobChangesApiGetMoveTeamOption0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMoveTeamOption_5(requestParameters: JobChangesApiGetMoveTeamOption0Request, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetMoveTeamOptionResponse> {
            return localVarFp.getMoveTeamOption_5(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the opening options for the specified job change ID.
         * @param {JobChangesApiGetOpeningOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningOptions(requestParameters: JobChangesApiGetOpeningOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetOpeningOptionsResponse> {
            return localVarFp.getOpeningOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the opening options for the specified job change ID.
         * @param {JobChangesApiGetOpeningOptions0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpeningOptions_6(requestParameters: JobChangesApiGetOpeningOptions0Request, options?: AxiosRequestConfig): AxiosPromise<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> {
            return localVarFp.getOpeningOptions_6(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Retrieves a position for the specified job change ID.
         * @param {JobChangesApiGetPositionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionById(requestParameters: JobChangesApiGetPositionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetPositionByIdResponse> {
            return localVarFp.getPositionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Retrieves a position for the specified job change ID.
         * @param {JobChangesApiGetPositionBySubresourceIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPositionBySubresourceId(requestParameters: JobChangesApiGetPositionBySubresourceIdRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> {
            return localVarFp.getPositionBySubresourceId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Retrieves a job profile for the specified job change ID.
         * @param {JobChangesApiGetProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(requestParameters: JobChangesApiGetProfileRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> {
            return localVarFp.getProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the start details for the specified job change ID.
         * @param {JobChangesApiGetStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails(requestParameters: JobChangesApiGetStartDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> {
            return localVarFp.getStartDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Retrieves the start details for the specified job change ID.
         * @param {JobChangesApiGetStartDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails_7(requestParameters: JobChangesApiGetStartDetails0Request, options?: AxiosRequestConfig): AxiosPromise<JobChangesGetStartDetailsResponse> {
            return localVarFp.getStartDetails_7(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the location options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/location/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this request field: location{id}.   To retrieve a location ID, you can call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to locations by location categories for the staffingEvent. You can filter the results by effectiveDate. By default, it returns locations on the current date.   To retrieve a workShift ID, call the GET /values/jobChangesGroup/workShifts prompt endpoint with the location query parameter. It returns work shifts by location. If you don\'t specify the location parameter, it returns an empty result.  To retrieve a workSpace ID, call the GET /values/jobChangesGroup/workSpaces prompt endpoint with the location query parameter. It returns HREF links to workspaces by configured prompt categories for the specified location. You can filter the results by effectiveDate. By default, it returns workspaces on the current date.  Secured by: Staffing Actions: Location  Scope: Staffing
         * @summary Partially updates the location options for the specified change job ID.
         * @param {JobChangesApiPartialUpdateLocationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateLocationOptions(requestParameters: JobChangesApiPartialUpdateLocationOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobLocation90151d6c4ff110001b4a46091678025c> {
            return localVarFp.partialUpdateLocationOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the contract details options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/contract/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.   To retrieve a frequency ID, call the GET /values/jobChangesGroup/frequencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all frequencies based on staffing event for contingent workers. By default, it returns all frequencies in the tenant.  To retrieve a currency ID, call the GET /values/jobChangesGroup/currencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to active currencies by prompt category. By default, it returns all active currencies.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
         * @summary Partially updates the contract options for the specified change job ID.
         * @param {JobChangesApiPartiallyUpdateContractOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateContractOptions(requestParameters: JobChangesApiPartiallyUpdateContractOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107> {
            return localVarFp.partiallyUpdateContractOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits the specified change job ID.   To submit the Change Job event and initiate the Change Job business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the \"Save for Later\" action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Change Job event using the REST APIs. The user with correct permissions can edit and submit the saved Change Job event in the Workday UI.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Submit the specified change job ID.
         * @param {JobChangesApiSubmitChangeJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitChangeJob(requestParameters: JobChangesApiSubmitChangeJobRequest, options?: AxiosRequestConfig): AxiosPromise<EventState54e611eca2c910000fbc4579181c0111> {
            return localVarFp.submitChangeJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the administrative options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/administrative/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Note that there are no localization constraints in this API version. You can update the workingFTE and paidFTE fields even if the fields have not been localized.  To retrieve a positionWorkerType ID, you can call the GET /values/jobChangesGroup/employeeTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to employee types by country. By default, it returns all employee types, excluding contingent workers.  For the positionWorkerType ID, you can also call the GET /values/jobChangesGroup/contingentWorkerTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to contingent worker types for staffing event. If you specify location, it returns HREF links to contingent worker types by location or country. By default, it returns all contingent worker types.  To retrieve a workersCompensationCodeOverride ID, call the GET /values/jobChangesGroup/workersCompensationCodeOverrides prompt endpoint, which takes the job change ID as the staffing Event query parameter.   To retrieve a payRateType ID, call the GET /values/jobChangesGroup/payRateTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all pay rate types based on staffing event for contingent workers. By default, it returns all pay rate types in the tenant.   To retrieve companyInsiderType IDs, call the GET /values/jobChangesGroup/companyInsiderTypes prompt endpoint, which returns all company insider types in the tenant.   To retrieve an assignmentType ID, call the GET /values/jobChangesGroup/assignmentTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns assignmentTypes for the staffingEvent. By default, it returns all active assignment types.  To retrieve a workStudy ID, call the GET /values/jobChangesGroup/workStudyAwards prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns work study awards for the staffingEvent. By default, it returns all work studies in the tenant.  To retrieve a timeType ID, call the GET /values/jobChangesGroup/timeTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns time types for the staffingEvent. By default, it returns all time types based on the Relax Hiring Restrictions tenant configuration.  Secured by: Staffing Actions: Administrator  Scope: Staffing
         * @summary Partially updates the administrative options for the specified job change ID.
         * @param {JobChangesApiUpdateAdministrativeOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdministrativeOptions(requestParameters: JobChangesApiUpdateAdministrativeOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea> {
            return localVarFp.updateAdministrativeOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the businessTitle options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/businessTitle/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Business Title  Scope: Staffing
         * @summary Partially updates the businessTitle options for the specified change job ID.
         * @param {JobChangesApiUpdateBusinessTitleOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessTitleOptions(requestParameters: JobChangesApiUpdateBusinessTitleOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102> {
            return localVarFp.updateBusinessTitleOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the comment for the specified change job ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  You can call GET /jobChanges/{ID}/comment/{subResourceID} to get the existing data to update.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
         * @summary Partially updates the comment for the specified change job ID.
         * @param {JobChangesApiUpdateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(requestParameters: JobChangesApiUpdateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60> {
            return localVarFp.updateComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the job classifications for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobClassification/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: additionalJobClassifications[ {id} ].   To retrieve an additionalJobClassifications ID, call the GET /values/jobChangesGroup/jobClassifications prompt endpoint with the location and/or staffingEvent query parameter. It returns HREF links to job classifications by location for the staffing event. It returns an empty result if both location and staffingEvent are not specified. You can filter the results by effectiveDate. By default, it returns job classifications on the current date.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
         * @summary Partially updates the jobClassification options for the specified change job ID.
         * @param {JobChangesApiUpdateJobClassificationOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobClassificationOptions(requestParameters: JobChangesApiUpdateJobClassificationOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobJobClassificationData354103f196361000084489bcb281017f> {
            return localVarFp.updateJobClassificationOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the job profile options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobProfile/{subResourceID} to get the existing data to update.  The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: jobProfile{id}  To retrieve a jobProfile ID, call the GET /values/jobChangesGroup/jobProfiles prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to the job profiles by the prompt category. If you don\'t specify the staffingEvent parameter, it returns all job profiles, regardless of their categories. You can also filter the job profiles by the effectiveDate query parameter. The default is the current date.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
         * @summary Partially updates the jobProfile options for the specified change job ID.
         * @param {JobChangesApiUpdateJobProfileOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateJobProfileOptions(requestParameters: JobChangesApiUpdateJobProfileOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115> {
            return localVarFp.updateJobProfileOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the moveTeam options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/moveTeam/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
         * @summary Partially updates the moveTeam options for the specified change job ID.
         * @param {JobChangesApiUpdateMoveTeamOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMoveTeamOptions(requestParameters: JobChangesApiUpdateMoveTeamOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146> {
            return localVarFp.updateMoveTeamOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the opening options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/opening/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: headcountOption{id}   To retrieve a headcountOption ID, call the GET /values/jobChangesGroup/headcountOptions prompt endpoint, which takes the job change ID as the staffingEvent query parameter. By default, it returns all headcount options.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Partially updates the opening options for the specified change job ID.
         * @param {JobChangesApiUpdateOpeningOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOpeningOptions(requestParameters: JobChangesApiUpdateOpeningOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobOpeningData97af9049a5fd10001c4888d654170000> {
            return localVarFp.updateOpeningOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the position options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: position{id}, createPosition, closePosition, availableForOverlap  To retrieve a position ID, call the GET /values/jobChangesGroup/proposedPosition prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to proposed positions based on staffing event for contingent workers. You can filter the results by effectiveDate. By default, it returns all proposed positions on current date.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
         * @summary Partially updates the position options for the specified change job ID.
         * @param {JobChangesApiUpdatePositionOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePositionOptions(requestParameters: JobChangesApiUpdatePositionOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221> {
            return localVarFp.updatePositionOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the start details for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: date, reason{id}.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
         * @summary Partially updates the startDetails options for the specified change job ID.
         * @param {JobChangesApiUpdateStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStartDetails(requestParameters: JobChangesApiUpdateStartDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020> {
            return localVarFp.updateStartDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAdminOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetAdminOptionsRequest
 */
export type JobChangesApiGetAdminOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetAdminOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetAdminOptions
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getAdministrativeOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetAdministrativeOptionsRequest
 */
export type JobChangesApiGetAdministrativeOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetAdministrativeOptions
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetAdministrativeOptions
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetAdministrativeOptions
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getBusinessTitle operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetBusinessTitleRequest
 */
export type JobChangesApiGetBusinessTitleRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetBusinessTitle
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetBusinessTitle
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getBusinessTitle_1 operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetBusinessTitle0Request
 */
export type JobChangesApiGetBusinessTitle0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetBusinessTitle0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetBusinessTitle0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetBusinessTitle0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getById operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetByIdRequest
 */
export type JobChangesApiGetByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetById
    */
    readonly iD: string
    
}

/**
 * Request parameters for getCommentById operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetCommentByIdRequest
 */
export type JobChangesApiGetCommentByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetCommentById
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetCommentById
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetCommentById
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getCommentInfo operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetCommentInfoRequest
 */
export type JobChangesApiGetCommentInfoRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetCommentInfo
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetCommentInfo
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getContractOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetContractOptionsRequest
 */
export type JobChangesApiGetContractOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetContractOptions
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetContractOptions
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetContractOptions
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getContractOptions_2 operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetContractOptions0Request
 */
export type JobChangesApiGetContractOptions0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetContractOptions0
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetContractOptions0
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getJobClassification operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetJobClassificationRequest
 */
export type JobChangesApiGetJobClassificationRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetJobClassification
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetJobClassification
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetJobClassification
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getJobClassification_3 operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetJobClassification0Request
 */
export type JobChangesApiGetJobClassification0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetJobClassification0
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetJobClassification0
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getJobProfile operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetJobProfileRequest
 */
export type JobChangesApiGetJobProfileRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetJobProfile
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetJobProfile
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetJobProfile
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getLocationInfo operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetLocationInfoRequest
 */
export type JobChangesApiGetLocationInfoRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetLocationInfo
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetLocationInfo
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetLocationInfo
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getLocationInfo_4 operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetLocationInfo0Request
 */
export type JobChangesApiGetLocationInfo0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetLocationInfo0
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetLocationInfo0
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getMoveTeamOption operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetMoveTeamOptionRequest
 */
export type JobChangesApiGetMoveTeamOptionRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetMoveTeamOption
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetMoveTeamOption
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getMoveTeamOption_5 operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetMoveTeamOption0Request
 */
export type JobChangesApiGetMoveTeamOption0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetMoveTeamOption0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetMoveTeamOption0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetMoveTeamOption0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getOpeningOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetOpeningOptionsRequest
 */
export type JobChangesApiGetOpeningOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetOpeningOptions
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetOpeningOptions
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetOpeningOptions
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getOpeningOptions_6 operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetOpeningOptions0Request
 */
export type JobChangesApiGetOpeningOptions0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetOpeningOptions0
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetOpeningOptions0
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getPositionById operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetPositionByIdRequest
 */
export type JobChangesApiGetPositionByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetPositionById
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetPositionById
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetPositionById
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getPositionBySubresourceId operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetPositionBySubresourceIdRequest
 */
export type JobChangesApiGetPositionBySubresourceIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetPositionBySubresourceId
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetPositionBySubresourceId
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getProfile operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetProfileRequest
 */
export type JobChangesApiGetProfileRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetProfile
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetProfile
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getStartDetails operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetStartDetailsRequest
 */
export type JobChangesApiGetStartDetailsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetStartDetails
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiGetStartDetails
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getStartDetails_7 operation in JobChangesApi.
 * @export
 * @interface JobChangesApiGetStartDetails0Request
 */
export type JobChangesApiGetStartDetails0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiGetStartDetails0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobChangesApiGetStartDetails0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobChangesApiGetStartDetails0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for partialUpdateLocationOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiPartialUpdateLocationOptionsRequest
 */
export type JobChangesApiPartialUpdateLocationOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiPartialUpdateLocationOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiPartialUpdateLocationOptions
    */
    readonly subresourceID: string
    
} & ChangeJobLocation90151d6c4ff110001b4a46091678025c

/**
 * Request parameters for partiallyUpdateContractOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiPartiallyUpdateContractOptionsRequest
 */
export type JobChangesApiPartiallyUpdateContractOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiPartiallyUpdateContractOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiPartiallyUpdateContractOptions
    */
    readonly subresourceID: string
    
} & ChangeJobContractDetailsData27ec818d10d010000386ce823ac20107

/**
 * Request parameters for submitChangeJob operation in JobChangesApi.
 * @export
 * @interface JobChangesApiSubmitChangeJobRequest
 */
export type JobChangesApiSubmitChangeJobRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiSubmitChangeJob
    */
    readonly iD: string
    
} & EventState54e611eca2c910000fbc4579181c0111

/**
 * Request parameters for updateAdministrativeOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateAdministrativeOptionsRequest
 */
export type JobChangesApiUpdateAdministrativeOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateAdministrativeOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateAdministrativeOptions
    */
    readonly subresourceID: string
    
} & ChangeJobAdministrativeDetailsDataF8f20079bc5a1000089ccb7f6a8800ea

/**
 * Request parameters for updateBusinessTitleOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateBusinessTitleOptionsRequest
 */
export type JobChangesApiUpdateBusinessTitleOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateBusinessTitleOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateBusinessTitleOptions
    */
    readonly subresourceID: string
    
} & ChangeJobBusinessTitle3db8095ffa18100013a5f96969ca0102

/**
 * Request parameters for updateComment operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateCommentRequest
 */
export type JobChangesApiUpdateCommentRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateComment
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateComment
    */
    readonly subresourceID: string
    
} & Comments7d98fd55aeee100022968e52a1b31c60

/**
 * Request parameters for updateJobClassificationOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateJobClassificationOptionsRequest
 */
export type JobChangesApiUpdateJobClassificationOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateJobClassificationOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateJobClassificationOptions
    */
    readonly subresourceID: string
    
} & ChangeJobJobClassificationData354103f196361000084489bcb281017f

/**
 * Request parameters for updateJobProfileOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateJobProfileOptionsRequest
 */
export type JobChangesApiUpdateJobProfileOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateJobProfileOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateJobProfileOptions
    */
    readonly subresourceID: string
    
} & ChangeJobJobProfileData3db8095ffa18100013f019a27a1f0115

/**
 * Request parameters for updateMoveTeamOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateMoveTeamOptionsRequest
 */
export type JobChangesApiUpdateMoveTeamOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateMoveTeamOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateMoveTeamOptions
    */
    readonly subresourceID: string
    
} & ChangeJobMoveTeamData544fdf5c01da1000238ad82d26d90146

/**
 * Request parameters for updateOpeningOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateOpeningOptionsRequest
 */
export type JobChangesApiUpdateOpeningOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateOpeningOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateOpeningOptions
    */
    readonly subresourceID: string
    
} & ChangeJobOpeningData97af9049a5fd10001c4888d654170000

/**
 * Request parameters for updatePositionOptions operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdatePositionOptionsRequest
 */
export type JobChangesApiUpdatePositionOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdatePositionOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdatePositionOptions
    */
    readonly subresourceID: string
    
} & ChangeJobPositionDataDfc4e58f7308100018bd1c459f435221

/**
 * Request parameters for updateStartDetails operation in JobChangesApi.
 * @export
 * @interface JobChangesApiUpdateStartDetailsRequest
 */
export type JobChangesApiUpdateStartDetailsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobChangesApiUpdateStartDetails
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof JobChangesApiUpdateStartDetails
    */
    readonly subresourceID: string
    
} & JobChangesStartDetailsDataCe861a6a360d10002d40f176b7180020

/**
 * JobChangesApiGenerated - object-oriented interface
 * @export
 * @class JobChangesApiGenerated
 * @extends {BaseAPI}
 */
export class JobChangesApiGenerated extends BaseAPI {
    /**
     * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     * @summary Retrieves the administrative options for the specified job change ID.
     * @param {JobChangesApiGetAdminOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getAdminOptions(requestParameters: JobChangesApiGetAdminOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getAdminOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the administrative options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Note that there are no localization constraints in this API version. This method returns the workingFTE and paidFTE fields even if the fields have not been localized.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     * @summary Retrieves the administrative options for the specified job change ID.
     * @param {JobChangesApiGetAdministrativeOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getAdministrativeOptions(requestParameters: JobChangesApiGetAdministrativeOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getAdministrativeOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     * @summary Retrieves a business title for the specified job change ID.
     * @param {JobChangesApiGetBusinessTitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getBusinessTitle(requestParameters: JobChangesApiGetBusinessTitleRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getBusinessTitle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a business title for the specified specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     * @summary Retrieves a business title for the specified job change ID.
     * @param {JobChangesApiGetBusinessTitle0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getBusinessTitle_1(requestParameters: JobChangesApiGetBusinessTitle0Request, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getBusinessTitle_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a change job event with the specified ID.  Secured by: Change Job (Mass Action), Change Job (REST Service), Staffing Actions, Staffing Actions: Academic Pay, Staffing Actions: Additional Job Classifications, Staffing Actions: Administrator, Staffing Actions: Attachments, Staffing Actions: Business Title, Staffing Actions: Change Job Date and Reason, Staffing Actions: Compensation for All Job Profiles, Staffing Actions: Contract Details, Staffing Actions: Hire Student, Staffing Actions: Job Profile, Staffing Actions: View \\~Worker\\~ Start Date Correction  Scope: Staffing
     * @summary Retrieves a single change job event instance.
     * @param {JobChangesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getById(requestParameters: JobChangesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @summary Returns the comment information for the specified job change ID.
     * @param {JobChangesApiGetCommentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getCommentById(requestParameters: JobChangesApiGetCommentByIdRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getCommentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the comment information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @summary Returns the comment information for the specified job change ID.
     * @param {JobChangesApiGetCommentInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getCommentInfo(requestParameters: JobChangesApiGetCommentInfoRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getCommentInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     * @summary Retrieves the contract options for the specified change job ID.
     * @param {JobChangesApiGetContractOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getContractOptions(requestParameters: JobChangesApiGetContractOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getContractOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the contract options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     * @summary Retrieves the contract options for the specified change job ID.
     * @param {JobChangesApiGetContractOptions0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getContractOptions_2(requestParameters: JobChangesApiGetContractOptions0Request, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getContractOptions_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     * @summary Retrieves a job classification for the specified job change ID.
     * @param {JobChangesApiGetJobClassificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getJobClassification(requestParameters: JobChangesApiGetJobClassificationRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getJobClassification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a job classification for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     * @summary Retrieves a job classification for the specified job change ID.
     * @param {JobChangesApiGetJobClassification0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getJobClassification_3(requestParameters: JobChangesApiGetJobClassification0Request, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getJobClassification_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     * @summary Retrieves a job profile for the specified job change ID.
     * @param {JobChangesApiGetJobProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getJobProfile(requestParameters: JobChangesApiGetJobProfileRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getJobProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
     * @summary Returns the location information for the specified job change ID.
     * @param {JobChangesApiGetLocationInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getLocationInfo(requestParameters: JobChangesApiGetLocationInfoRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getLocationInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the location information for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Location  Scope: Staffing
     * @summary Returns the location information for the specified job change ID.
     * @param {JobChangesApiGetLocationInfo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getLocationInfo_4(requestParameters: JobChangesApiGetLocationInfo0Request, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getLocationInfo_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
     * @summary Retrieves a move team option from the specified job change ID.
     * @param {JobChangesApiGetMoveTeamOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getMoveTeamOption(requestParameters: JobChangesApiGetMoveTeamOptionRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getMoveTeamOption(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a move team option from the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
     * @summary Retrieves a move team option from the specified job change ID.
     * @param {JobChangesApiGetMoveTeamOption0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getMoveTeamOption_5(requestParameters: JobChangesApiGetMoveTeamOption0Request, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getMoveTeamOption_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @summary Retrieves the opening options for the specified job change ID.
     * @param {JobChangesApiGetOpeningOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getOpeningOptions(requestParameters: JobChangesApiGetOpeningOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getOpeningOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the opening options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @summary Retrieves the opening options for the specified job change ID.
     * @param {JobChangesApiGetOpeningOptions0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getOpeningOptions_6(requestParameters: JobChangesApiGetOpeningOptions0Request, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getOpeningOptions_6(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     * @summary Retrieves a position for the specified job change ID.
     * @param {JobChangesApiGetPositionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getPositionById(requestParameters: JobChangesApiGetPositionByIdRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getPositionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a position for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     * @summary Retrieves a position for the specified job change ID.
     * @param {JobChangesApiGetPositionBySubresourceIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getPositionBySubresourceId(requestParameters: JobChangesApiGetPositionBySubresourceIdRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getPositionBySubresourceId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a job profile for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     * @summary Retrieves a job profile for the specified job change ID.
     * @param {JobChangesApiGetProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getProfile(requestParameters: JobChangesApiGetProfileRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @summary Retrieves the start details for the specified job change ID.
     * @param {JobChangesApiGetStartDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getStartDetails(requestParameters: JobChangesApiGetStartDetailsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getStartDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the start details for the specified job change ID.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @summary Retrieves the start details for the specified job change ID.
     * @param {JobChangesApiGetStartDetails0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public getStartDetails_7(requestParameters: JobChangesApiGetStartDetails0Request, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).getStartDetails_7(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the location options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/location/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this request field: location{id}.   To retrieve a location ID, you can call the GET /values/jobChangesGroup/locations prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to locations by location categories for the staffingEvent. You can filter the results by effectiveDate. By default, it returns locations on the current date.   To retrieve a workShift ID, call the GET /values/jobChangesGroup/workShifts prompt endpoint with the location query parameter. It returns work shifts by location. If you don\'t specify the location parameter, it returns an empty result.  To retrieve a workSpace ID, call the GET /values/jobChangesGroup/workSpaces prompt endpoint with the location query parameter. It returns HREF links to workspaces by configured prompt categories for the specified location. You can filter the results by effectiveDate. By default, it returns workspaces on the current date.  Secured by: Staffing Actions: Location  Scope: Staffing
     * @summary Partially updates the location options for the specified change job ID.
     * @param {JobChangesApiPartialUpdateLocationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public partialUpdateLocationOptions(requestParameters: JobChangesApiPartialUpdateLocationOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).partialUpdateLocationOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the contract details options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/contract/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.   To retrieve a frequency ID, call the GET /values/jobChangesGroup/frequencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all frequencies based on staffing event for contingent workers. By default, it returns all frequencies in the tenant.  To retrieve a currency ID, call the GET /values/jobChangesGroup/currencies prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to active currencies by prompt category. By default, it returns all active currencies.  Secured by: Staffing Actions: Contract Details  Scope: Staffing
     * @summary Partially updates the contract options for the specified change job ID.
     * @param {JobChangesApiPartiallyUpdateContractOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public partiallyUpdateContractOptions(requestParameters: JobChangesApiPartiallyUpdateContractOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).partiallyUpdateContractOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits the specified change job ID.   To submit the Change Job event and initiate the Change Job business process, specify an empty request body: {}. To save for later, specify this request body: {     \"businessProcessParameters\": {         \"action\":{             \"id\": \"d9e41a8c446c11de98360015c5e6daf6\"         }     } }  The action id value is the Workday ID of the \"Save for Later\" action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Change Job event using the REST APIs. The user with correct permissions can edit and submit the saved Change Job event in the Workday UI.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @summary Submit the specified change job ID.
     * @param {JobChangesApiSubmitChangeJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public submitChangeJob(requestParameters: JobChangesApiSubmitChangeJobRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).submitChangeJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the administrative options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/administrative/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Note that there are no localization constraints in this API version. You can update the workingFTE and paidFTE fields even if the fields have not been localized.  To retrieve a positionWorkerType ID, you can call the GET /values/jobChangesGroup/employeeTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to employee types by country. By default, it returns all employee types, excluding contingent workers.  For the positionWorkerType ID, you can also call the GET /values/jobChangesGroup/contingentWorkerTypes prompt endpoint, with staffingEvent and location query parameters. If you specify the staffingEvent parameter, it returns HREF links to contingent worker types for staffing event. If you specify location, it returns HREF links to contingent worker types by location or country. By default, it returns all contingent worker types.  To retrieve a workersCompensationCodeOverride ID, call the GET /values/jobChangesGroup/workersCompensationCodeOverrides prompt endpoint, which takes the job change ID as the staffing Event query parameter.   To retrieve a payRateType ID, call the GET /values/jobChangesGroup/payRateTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns all pay rate types based on staffing event for contingent workers. By default, it returns all pay rate types in the tenant.   To retrieve companyInsiderType IDs, call the GET /values/jobChangesGroup/companyInsiderTypes prompt endpoint, which returns all company insider types in the tenant.   To retrieve an assignmentType ID, call the GET /values/jobChangesGroup/assignmentTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns assignmentTypes for the staffingEvent. By default, it returns all active assignment types.  To retrieve a workStudy ID, call the GET /values/jobChangesGroup/workStudyAwards prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns work study awards for the staffingEvent. By default, it returns all work studies in the tenant.  To retrieve a timeType ID, call the GET /values/jobChangesGroup/timeTypes prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns time types for the staffingEvent. By default, it returns all time types based on the Relax Hiring Restrictions tenant configuration.  Secured by: Staffing Actions: Administrator  Scope: Staffing
     * @summary Partially updates the administrative options for the specified job change ID.
     * @param {JobChangesApiUpdateAdministrativeOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateAdministrativeOptions(requestParameters: JobChangesApiUpdateAdministrativeOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateAdministrativeOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the businessTitle options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/businessTitle/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Business Title  Scope: Staffing
     * @summary Partially updates the businessTitle options for the specified change job ID.
     * @param {JobChangesApiUpdateBusinessTitleOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateBusinessTitleOptions(requestParameters: JobChangesApiUpdateBusinessTitleOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateBusinessTitleOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the comment for the specified change job ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  You can call GET /jobChanges/{ID}/comment/{subResourceID} to get the existing data to update.  Secured by: Change Job (Mass Action), Change Job (REST Service)  Scope: Staffing
     * @summary Partially updates the comment for the specified change job ID.
     * @param {JobChangesApiUpdateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateComment(requestParameters: JobChangesApiUpdateCommentRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the job classifications for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobClassification/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: additionalJobClassifications[ {id} ].   To retrieve an additionalJobClassifications ID, call the GET /values/jobChangesGroup/jobClassifications prompt endpoint with the location and/or staffingEvent query parameter. It returns HREF links to job classifications by location for the staffing event. It returns an empty result if both location and staffingEvent are not specified. You can filter the results by effectiveDate. By default, it returns job classifications on the current date.  Secured by: Staffing Actions: Additional Job Classifications  Scope: Staffing
     * @summary Partially updates the jobClassification options for the specified change job ID.
     * @param {JobChangesApiUpdateJobClassificationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateJobClassificationOptions(requestParameters: JobChangesApiUpdateJobClassificationOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateJobClassificationOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the job profile options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/jobProfile/{subResourceID} to get the existing data to update.  The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: jobProfile{id}  To retrieve a jobProfile ID, call the GET /values/jobChangesGroup/jobProfiles prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns HREF links to the job profiles by the prompt category. If you don\'t specify the staffingEvent parameter, it returns all job profiles, regardless of their categories. You can also filter the job profiles by the effectiveDate query parameter. The default is the current date.  Secured by: Staffing Actions: Job Profile  Scope: Staffing
     * @summary Partially updates the jobProfile options for the specified change job ID.
     * @param {JobChangesApiUpdateJobProfileOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateJobProfileOptions(requestParameters: JobChangesApiUpdateJobProfileOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateJobProfileOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the moveTeam options for the specified change job ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/moveTeam/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  Secured by: Staffing Actions: Move Manager\'s Team  Scope: Staffing
     * @summary Partially updates the moveTeam options for the specified change job ID.
     * @param {JobChangesApiUpdateMoveTeamOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateMoveTeamOptions(requestParameters: JobChangesApiUpdateMoveTeamOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateMoveTeamOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the opening options for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/opening/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least this required field: headcountOption{id}   To retrieve a headcountOption ID, call the GET /values/jobChangesGroup/headcountOptions prompt endpoint, which takes the job change ID as the staffingEvent query parameter. By default, it returns all headcount options.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @summary Partially updates the opening options for the specified change job ID.
     * @param {JobChangesApiUpdateOpeningOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateOpeningOptions(requestParameters: JobChangesApiUpdateOpeningOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateOpeningOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the position options for the specified job change ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: position{id}, createPosition, closePosition, availableForOverlap  To retrieve a position ID, call the GET /values/jobChangesGroup/proposedPosition prompt endpoint, which takes the job change ID as the staffingEvent query parameter. It returns HREF links to proposed positions based on staffing event for contingent workers. You can filter the results by effectiveDate. By default, it returns all proposed positions on current date.  Secured by: Staffing Actions: Select or Create Position  Scope: Staffing
     * @summary Partially updates the position options for the specified change job ID.
     * @param {JobChangesApiUpdatePositionOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updatePositionOptions(requestParameters: JobChangesApiUpdatePositionOptionsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updatePositionOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the start details for the specified job change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /jobChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The updates in this PATCH method do not persist until you call POST /jobChanges/{ID}/submit.  In the request body, specify at least these request fields: date, reason{id}.   To retrieve a reason ID, call the GET /values/jobChangesGroup/reason prompt endpoint, which takes the job change ID as the staffingEvent query parameter. If you specify the staffingEvent parameter, it returns change job reasons for the staffingEvent, by the change job category. By default, it returns all change job categories and reasons.  Secured by: Staffing Actions: Change Job Date and Reason  Scope: Staffing
     * @summary Partially updates the startDetails options for the specified change job ID.
     * @param {JobChangesApiUpdateStartDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobChangesApiGenerated
     */
    public updateStartDetails(requestParameters: JobChangesApiUpdateStartDetailsRequest, options?: AxiosRequestConfig) {
        return JobChangesApiFp(this.configuration).updateStartDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
