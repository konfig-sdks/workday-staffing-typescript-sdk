/* tslint:disable */
/* eslint-disable */
/*
staffing

The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.



Related Information:
- Administrator Guide: Setup Considerations: Job Changes

The version of the OpenAPI document: v6


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { JobProfileDetailView7deab99f645f10000bd5e61a1b780041 } from '../models';
// @ts-ignore
import { JobProfilesListCollectionResponse } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * JobProfilesApi - axios parameter creator
 * @export
 */
export const JobProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a job profile with the specified ID.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
         * @summary Retrieves a single job profile instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getById', 'iD', iD)
            const localVarPath = `/jobProfiles/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobProfiles/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of job profiles.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
         * @summary Retrieves a collection of job profiles.
         * @param {boolean} [includeInactive] If true, the method returns inactive job profiles. Default is false.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollection: async (includeInactive?: boolean, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobProfiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (includeInactive !== undefined) {
                localVarQueryParameter['includeInactive'] = includeInactive;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobProfiles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobProfilesApi - functional programming interface
 * @export
 */
export const JobProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a job profile with the specified ID.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
         * @summary Retrieves a single job profile instance.
         * @param {JobProfilesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: JobProfilesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobProfileDetailView7deab99f645f10000bd5e61a1b780041>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of job profiles.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
         * @summary Retrieves a collection of job profiles.
         * @param {JobProfilesApiListCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCollection(requestParameters: JobProfilesApiListCollectionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobProfilesListCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCollection(requestParameters.includeInactive, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobProfilesApi - factory interface
 * @export
 */
export const JobProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobProfilesApiFp(configuration)
    return {
        /**
         * Retrieves a job profile with the specified ID.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
         * @summary Retrieves a single job profile instance.
         * @param {JobProfilesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: JobProfilesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<JobProfileDetailView7deab99f645f10000bd5e61a1b780041> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of job profiles.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
         * @summary Retrieves a collection of job profiles.
         * @param {JobProfilesApiListCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCollection(requestParameters: JobProfilesApiListCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<JobProfilesListCollectionResponse> {
            return localVarFp.listCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in JobProfilesApi.
 * @export
 * @interface JobProfilesApiGetByIdRequest
 */
export type JobProfilesApiGetByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobProfilesApiGetById
    */
    readonly iD: string
    
}

/**
 * Request parameters for listCollection operation in JobProfilesApi.
 * @export
 * @interface JobProfilesApiListCollectionRequest
 */
export type JobProfilesApiListCollectionRequest = {
    
    /**
    * If true, the method returns inactive job profiles. Default is false.
    * @type {boolean}
    * @memberof JobProfilesApiListCollection
    */
    readonly includeInactive?: boolean
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobProfilesApiListCollection
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobProfilesApiListCollection
    */
    readonly offset?: number
    
}

/**
 * JobProfilesApiGenerated - object-oriented interface
 * @export
 * @class JobProfilesApiGenerated
 * @extends {BaseAPI}
 */
export class JobProfilesApiGenerated extends BaseAPI {
    /**
     * Retrieves a job profile with the specified ID.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
     * @summary Retrieves a single job profile instance.
     * @param {JobProfilesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobProfilesApiGenerated
     */
    public getById(requestParameters: JobProfilesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return JobProfilesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of job profiles.  Secured by: Job Profile: View, Public Job: View  Scope: Jobs & Positions
     * @summary Retrieves a collection of job profiles.
     * @param {JobProfilesApiListCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobProfilesApiGenerated
     */
    public listCollection(requestParameters: JobProfilesApiListCollectionRequest = {}, options?: AxiosRequestConfig) {
        return JobProfilesApiFp(this.configuration).listCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
