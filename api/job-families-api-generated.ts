/* tslint:disable */
/* eslint-disable */
/*
staffing

The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.



Related Information:
- Administrator Guide: Setup Considerations: Job Changes

The version of the OpenAPI document: v6


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { JobFamiliesListResponse } from '../models';
// @ts-ignore
import { JobFamilyView51ed1475e9e6100005d10fcedc5a000a } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * JobFamiliesApi - axios parameter creator
 * @export
 */
export const JobFamiliesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a job family with the specified ID.  Secured by: Job Information  Scope: Jobs & Positions
         * @summary Retrieves a single job family instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getById', 'iD', iD)
            const localVarPath = `/jobFamilies/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobFamilies/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a collection of job families.  Secured by: Job Information  Scope: Jobs & Positions
         * @summary Retrieves a collection of job families.
         * @param {boolean} [inactive] If true, the method returns inactive job families. Default is false.
         * @param {Array<string>} [jobFamilyGroup] The job family group for the job family. You can specify more than 1 jobFamilyGroup query parameter.
         * @param {Array<string>} [jobProfile] The job profile for the job family. You can specify more than 1 jobFamilyGroup query parameter. For possible values, you can use a returned id from GET /jobProfiles.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (inactive?: boolean, jobFamilyGroup?: Array<string>, jobProfile?: Array<string>, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobFamilies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (inactive !== undefined) {
                localVarQueryParameter['inactive'] = inactive;
            }

            if (jobFamilyGroup) {
                localVarQueryParameter['jobFamilyGroup'] = jobFamilyGroup;
            }

            if (jobProfile) {
                localVarQueryParameter['jobProfile'] = jobProfile;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/jobFamilies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobFamiliesApi - functional programming interface
 * @export
 */
export const JobFamiliesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobFamiliesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a job family with the specified ID.  Secured by: Job Information  Scope: Jobs & Positions
         * @summary Retrieves a single job family instance.
         * @param {JobFamiliesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: JobFamiliesApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobFamilyView51ed1475e9e6100005d10fcedc5a000a>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a collection of job families.  Secured by: Job Information  Scope: Jobs & Positions
         * @summary Retrieves a collection of job families.
         * @param {JobFamiliesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: JobFamiliesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobFamiliesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.inactive, requestParameters.jobFamilyGroup, requestParameters.jobProfile, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobFamiliesApi - factory interface
 * @export
 */
export const JobFamiliesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobFamiliesApiFp(configuration)
    return {
        /**
         * Retrieves a job family with the specified ID.  Secured by: Job Information  Scope: Jobs & Positions
         * @summary Retrieves a single job family instance.
         * @param {JobFamiliesApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: JobFamiliesApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<JobFamilyView51ed1475e9e6100005d10fcedc5a000a> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a collection of job families.  Secured by: Job Information  Scope: Jobs & Positions
         * @summary Retrieves a collection of job families.
         * @param {JobFamiliesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: JobFamiliesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<JobFamiliesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getById operation in JobFamiliesApi.
 * @export
 * @interface JobFamiliesApiGetByIdRequest
 */
export type JobFamiliesApiGetByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof JobFamiliesApiGetById
    */
    readonly iD: string
    
}

/**
 * Request parameters for list operation in JobFamiliesApi.
 * @export
 * @interface JobFamiliesApiListRequest
 */
export type JobFamiliesApiListRequest = {
    
    /**
    * If true, the method returns inactive job families. Default is false.
    * @type {boolean}
    * @memberof JobFamiliesApiList
    */
    readonly inactive?: boolean
    
    /**
    * The job family group for the job family. You can specify more than 1 jobFamilyGroup query parameter.
    * @type {Array<string>}
    * @memberof JobFamiliesApiList
    */
    readonly jobFamilyGroup?: Array<string>
    
    /**
    * The job profile for the job family. You can specify more than 1 jobFamilyGroup query parameter. For possible values, you can use a returned id from GET /jobProfiles.
    * @type {Array<string>}
    * @memberof JobFamiliesApiList
    */
    readonly jobProfile?: Array<string>
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof JobFamiliesApiList
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof JobFamiliesApiList
    */
    readonly offset?: number
    
}

/**
 * JobFamiliesApiGenerated - object-oriented interface
 * @export
 * @class JobFamiliesApiGenerated
 * @extends {BaseAPI}
 */
export class JobFamiliesApiGenerated extends BaseAPI {
    /**
     * Retrieves a job family with the specified ID.  Secured by: Job Information  Scope: Jobs & Positions
     * @summary Retrieves a single job family instance.
     * @param {JobFamiliesApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFamiliesApiGenerated
     */
    public getById(requestParameters: JobFamiliesApiGetByIdRequest, options?: AxiosRequestConfig) {
        return JobFamiliesApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a collection of job families.  Secured by: Job Information  Scope: Jobs & Positions
     * @summary Retrieves a collection of job families.
     * @param {JobFamiliesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobFamiliesApiGenerated
     */
    public list(requestParameters: JobFamiliesApiListRequest = {}, options?: AxiosRequestConfig) {
        return JobFamiliesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
