/* tslint:disable */
/* eslint-disable */
/*
staffing

The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.



Related Information:
- Administrator Guide: Setup Considerations: Job Changes

The version of the OpenAPI document: v6


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { MULTIPLEINSTANCEMODELREFERENCE } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PromptValuesApi - axios parameter creator
 * @export
 */
export const PromptValuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableLocations: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentChangeGroupCostCenters: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/costCenters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/costCenters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentTypes: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/assignmentTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/assignmentTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInsiderTypes: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/companyInsiderTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/companyInsiderTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContingentWorkerTypes: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/contingentWorkerTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/contingentWorkerTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencyInstances: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/currencies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTypes: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/employeeTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/employeeTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftInstances: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/gifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/gifts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrants: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/grants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/grants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/regions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_1: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/reason`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/reason',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_2: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/customs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/customs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_3: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_4: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/workers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_5: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_6: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/workers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/workers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_7: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/workStudyAwards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/workStudyAwards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_8: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/positions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_9: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/jobRequisitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/jobRequisitions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_10: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/jobProfiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/jobProfiles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_11: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/companies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/companies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_12: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/jobClassifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/jobClassifications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_13: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/programs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_14: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_15: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/funds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/funds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_16: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/workersCompensationCodeOverrides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/workersCompensationCodeOverrides',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_17: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/workShifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/workShifts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [event] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {string} [organizationType] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_18: async (effectiveDate?: string | Date, event?: string, limit?: number, offset?: number, organizationType?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/organizationAssignmentChangesGroup/businessUnits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (event !== undefined) {
                localVarQueryParameter['event'] = event;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organizationType !== undefined) {
                localVarQueryParameter['organizationType'] = organizationType;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/organizationAssignmentChangesGroup/businessUnits',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_19: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/frequencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/frequencies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_20: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/payRateTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/payRateTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/headcountOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/headcountOptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProposedPositions: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/proposedPosition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/proposedPosition',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupervisoryOrgValues: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/supervisoryOrganization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/supervisoryOrganization',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeTypes: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/timeTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/timeTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerTypes: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/workerTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/workerTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {string | Date} [effectiveDate] 
         * @param {string} [job] 
         * @param {number} [limit] The maximum number of objects in a single response. The default and maximum is 1000.
         * @param {string} [location] 
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {Array<string>} [proposedManager] 
         * @param {string} [staffingEvent] 
         * @param {string} [worker] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceInstances: async (effectiveDate?: string | Date, job?: string, limit?: number, location?: string, offset?: number, proposedManager?: Array<string>, staffingEvent?: string, worker?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/values/jobChangesGroup/workSpaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = (effectiveDate as any instanceof Date) ?
                    (effectiveDate as any).toISOString().substr(0,10) :
                    effectiveDate;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (proposedManager) {
                localVarQueryParameter['proposedManager'] = proposedManager;
            }

            if (staffingEvent !== undefined) {
                localVarQueryParameter['staffingEvent'] = staffingEvent;
            }

            if (worker !== undefined) {
                localVarQueryParameter['worker'] = worker;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/values/jobChangesGroup/workSpaces',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromptValuesApi - functional programming interface
 * @export
 */
export const PromptValuesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromptValuesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiAvailableLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async availableLocations(requestParameters: PromptValuesApiAvailableLocationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.availableLocations(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetAssignmentChangeGroupCostCentersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentChangeGroupCostCenters(requestParameters: PromptValuesApiGetAssignmentChangeGroupCostCentersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentChangeGroupCostCenters(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetAssignmentTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssignmentTypes(requestParameters: PromptValuesApiGetAssignmentTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssignmentTypes(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetCompanyInsiderTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyInsiderTypes(requestParameters: PromptValuesApiGetCompanyInsiderTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyInsiderTypes(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetContingentWorkerTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContingentWorkerTypes(requestParameters: PromptValuesApiGetContingentWorkerTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContingentWorkerTypes(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetCurrencyInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrencyInstances(requestParameters: PromptValuesApiGetCurrencyInstancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrencyInstances(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetEmployeeTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeTypes(requestParameters: PromptValuesApiGetEmployeeTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeTypes(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetGiftInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGiftInstances(requestParameters: PromptValuesApiGetGiftInstancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGiftInstances(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGrants(requestParameters: PromptValuesApiGetGrantsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGrants(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_1(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_2(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances10Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_3(requestParameters: PromptValuesApiGetInstances10Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_3(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_4(requestParameters: PromptValuesApiGetInstances11Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_4(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances12Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_5(requestParameters: PromptValuesApiGetInstances12Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_5(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances13Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_6(requestParameters: PromptValuesApiGetInstances13Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_6(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances14Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_7(requestParameters: PromptValuesApiGetInstances14Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_7(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances15Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_8(requestParameters: PromptValuesApiGetInstances15Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_8(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances16Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_9(requestParameters: PromptValuesApiGetInstances16Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_9(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances17Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_10(requestParameters: PromptValuesApiGetInstances17Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_10(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances18Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_11(requestParameters: PromptValuesApiGetInstances18Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_11(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances19Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_12(requestParameters: PromptValuesApiGetInstances19Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_12(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_13(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_13(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_14(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_14(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_15(requestParameters: PromptValuesApiGetInstances4Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_15(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_16(requestParameters: PromptValuesApiGetInstances5Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_16(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_17(requestParameters: PromptValuesApiGetInstances6Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_17(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_18(requestParameters: PromptValuesApiGetInstances7Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_18(requestParameters.effectiveDate, requestParameters.event, requestParameters.limit, requestParameters.offset, requestParameters.organizationType, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances8Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_19(requestParameters: PromptValuesApiGetInstances8Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_19(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances9Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstances_20(requestParameters: PromptValuesApiGetInstances9Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstances_20(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOptions(requestParameters: PromptValuesApiGetOptionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOptions(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetProposedPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProposedPositions(requestParameters: PromptValuesApiGetProposedPositionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProposedPositions(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetSupervisoryOrgValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupervisoryOrgValues(requestParameters: PromptValuesApiGetSupervisoryOrgValuesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupervisoryOrgValues(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetTimeTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeTypes(requestParameters: PromptValuesApiGetTimeTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeTypes(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetWorkerTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkerTypes(requestParameters: PromptValuesApiGetWorkerTypesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkerTypes(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetWorkspaceInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceInstances(requestParameters: PromptValuesApiGetWorkspaceInstancesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceInstances(requestParameters.effectiveDate, requestParameters.job, requestParameters.limit, requestParameters.location, requestParameters.offset, requestParameters.proposedManager, requestParameters.staffingEvent, requestParameters.worker, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromptValuesApi - factory interface
 * @export
 */
export const PromptValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromptValuesApiFp(configuration)
    return {
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiAvailableLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availableLocations(requestParameters: PromptValuesApiAvailableLocationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.availableLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetAssignmentChangeGroupCostCentersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentChangeGroupCostCenters(requestParameters: PromptValuesApiGetAssignmentChangeGroupCostCentersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getAssignmentChangeGroupCostCenters(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetAssignmentTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssignmentTypes(requestParameters: PromptValuesApiGetAssignmentTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getAssignmentTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetCompanyInsiderTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyInsiderTypes(requestParameters: PromptValuesApiGetCompanyInsiderTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getCompanyInsiderTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetContingentWorkerTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContingentWorkerTypes(requestParameters: PromptValuesApiGetContingentWorkerTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getContingentWorkerTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetCurrencyInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencyInstances(requestParameters: PromptValuesApiGetCurrencyInstancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getCurrencyInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetEmployeeTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTypes(requestParameters: PromptValuesApiGetEmployeeTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getEmployeeTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetGiftInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGiftInstances(requestParameters: PromptValuesApiGetGiftInstancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getGiftInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetGrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGrants(requestParameters: PromptValuesApiGetGrantsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getGrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances10Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_3(requestParameters: PromptValuesApiGetInstances10Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_4(requestParameters: PromptValuesApiGetInstances11Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances12Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_5(requestParameters: PromptValuesApiGetInstances12Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_5(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances13Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_6(requestParameters: PromptValuesApiGetInstances13Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_6(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances14Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_7(requestParameters: PromptValuesApiGetInstances14Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_7(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances15Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_8(requestParameters: PromptValuesApiGetInstances15Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_8(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances16Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_9(requestParameters: PromptValuesApiGetInstances16Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_9(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances17Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_10(requestParameters: PromptValuesApiGetInstances17Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_10(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances18Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_11(requestParameters: PromptValuesApiGetInstances18Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_11(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances19Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_12(requestParameters: PromptValuesApiGetInstances19Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_12(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_13(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_13(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_14(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_14(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_15(requestParameters: PromptValuesApiGetInstances4Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_15(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_16(requestParameters: PromptValuesApiGetInstances5Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_16(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_17(requestParameters: PromptValuesApiGetInstances6Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_17(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_18(requestParameters: PromptValuesApiGetInstances7Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_18(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances8Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_19(requestParameters: PromptValuesApiGetInstances8Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_19(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetInstances9Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstances_20(requestParameters: PromptValuesApiGetInstances9Request = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getInstances_20(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptions(requestParameters: PromptValuesApiGetOptionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetProposedPositionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProposedPositions(requestParameters: PromptValuesApiGetProposedPositionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getProposedPositions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetSupervisoryOrgValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupervisoryOrgValues(requestParameters: PromptValuesApiGetSupervisoryOrgValuesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getSupervisoryOrgValues(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetTimeTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeTypes(requestParameters: PromptValuesApiGetTimeTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getTimeTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetWorkerTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkerTypes(requestParameters: PromptValuesApiGetWorkerTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getWorkerTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves instances that can be used as values for other endpoint parameters in this service.
         * @param {PromptValuesApiGetWorkspaceInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceInstances(requestParameters: PromptValuesApiGetWorkspaceInstancesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MULTIPLEINSTANCEMODELREFERENCE> {
            return localVarFp.getWorkspaceInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for availableLocations operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiAvailableLocationsRequest
 */
export type PromptValuesApiAvailableLocationsRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiAvailableLocations
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getAssignmentChangeGroupCostCenters operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetAssignmentChangeGroupCostCentersRequest
 */
export type PromptValuesApiGetAssignmentChangeGroupCostCentersRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetAssignmentChangeGroupCostCenters
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAssignmentChangeGroupCostCenters
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetAssignmentChangeGroupCostCenters
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetAssignmentChangeGroupCostCenters
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAssignmentChangeGroupCostCenters
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAssignmentChangeGroupCostCenters
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getAssignmentTypes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetAssignmentTypesRequest
 */
export type PromptValuesApiGetAssignmentTypesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetAssignmentTypes
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getCompanyInsiderTypes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetCompanyInsiderTypesRequest
 */
export type PromptValuesApiGetCompanyInsiderTypesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCompanyInsiderTypes
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getContingentWorkerTypes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetContingentWorkerTypesRequest
 */
export type PromptValuesApiGetContingentWorkerTypesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetContingentWorkerTypes
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getCurrencyInstances operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetCurrencyInstancesRequest
 */
export type PromptValuesApiGetCurrencyInstancesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetCurrencyInstances
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getEmployeeTypes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetEmployeeTypesRequest
 */
export type PromptValuesApiGetEmployeeTypesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetEmployeeTypes
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getGiftInstances operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetGiftInstancesRequest
 */
export type PromptValuesApiGetGiftInstancesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetGiftInstances
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetGiftInstances
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetGiftInstances
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetGiftInstances
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetGiftInstances
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetGiftInstances
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getGrants operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetGrantsRequest
 */
export type PromptValuesApiGetGrantsRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetGrants
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetGrants
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetGrants
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetGrants
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetGrants
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetGrants
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstancesRequest
 */
export type PromptValuesApiGetInstancesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_1 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances0Request
 */
export type PromptValuesApiGetInstances0Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances0
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_2 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances1Request
 */
export type PromptValuesApiGetInstances1Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances1
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_3 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances10Request
 */
export type PromptValuesApiGetInstances10Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances10
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_4 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances11Request
 */
export type PromptValuesApiGetInstances11Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances11
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_5 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances12Request
 */
export type PromptValuesApiGetInstances12Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances12
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_6 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances13Request
 */
export type PromptValuesApiGetInstances13Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances13
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances13
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances13
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances13
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances13
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances13
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_7 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances14Request
 */
export type PromptValuesApiGetInstances14Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances14
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_8 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances15Request
 */
export type PromptValuesApiGetInstances15Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances15
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances15
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances15
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances15
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances15
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances15
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_9 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances16Request
 */
export type PromptValuesApiGetInstances16Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances16
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_10 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances17Request
 */
export type PromptValuesApiGetInstances17Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances17
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_11 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances18Request
 */
export type PromptValuesApiGetInstances18Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances18
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances18
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances18
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances18
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances18
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances18
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_12 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances19Request
 */
export type PromptValuesApiGetInstances19Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances19
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_13 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances2Request
 */
export type PromptValuesApiGetInstances2Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances2
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_14 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances3Request
 */
export type PromptValuesApiGetInstances3Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances3
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_15 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances4Request
 */
export type PromptValuesApiGetInstances4Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances4
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_16 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances5Request
 */
export type PromptValuesApiGetInstances5Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances5
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_17 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances6Request
 */
export type PromptValuesApiGetInstances6Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances6
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_18 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances7Request
 */
export type PromptValuesApiGetInstances7Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances7
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances7
    */
    readonly event?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances7
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances7
    */
    readonly offset?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances7
    */
    readonly organizationType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances7
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_19 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances8Request
 */
export type PromptValuesApiGetInstances8Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances8
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getInstances_20 operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetInstances9Request
 */
export type PromptValuesApiGetInstances9Request = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetInstances9
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getOptions operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetOptionsRequest
 */
export type PromptValuesApiGetOptionsRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetOptions
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetOptions
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetOptions
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetOptions
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetOptions
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetOptions
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetOptions
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetOptions
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getProposedPositions operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetProposedPositionsRequest
 */
export type PromptValuesApiGetProposedPositionsRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetProposedPositions
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getSupervisoryOrgValues operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetSupervisoryOrgValuesRequest
 */
export type PromptValuesApiGetSupervisoryOrgValuesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetSupervisoryOrgValues
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getTimeTypes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetTimeTypesRequest
 */
export type PromptValuesApiGetTimeTypesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetTimeTypes
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getWorkerTypes operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetWorkerTypesRequest
 */
export type PromptValuesApiGetWorkerTypesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkerTypes
    */
    readonly worker?: string
    
}

/**
 * Request parameters for getWorkspaceInstances operation in PromptValuesApi.
 * @export
 * @interface PromptValuesApiGetWorkspaceInstancesRequest
 */
export type PromptValuesApiGetWorkspaceInstancesRequest = {
    
    /**
    * 
    * @type {string | Date}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly effectiveDate?: string | Date
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly job?: string
    
    /**
    * The maximum number of objects in a single response. The default and maximum is 1000.
    * @type {number}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly limit?: number
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly location?: string
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly offset?: number
    
    /**
    * 
    * @type {Array<string>}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly proposedManager?: Array<string>
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly staffingEvent?: string
    
    /**
    * 
    * @type {string}
    * @memberof PromptValuesApiGetWorkspaceInstances
    */
    readonly worker?: string
    
}

/**
 * PromptValuesApiGenerated - object-oriented interface
 * @export
 * @class PromptValuesApiGenerated
 * @extends {BaseAPI}
 */
export class PromptValuesApiGenerated extends BaseAPI {
    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiAvailableLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public availableLocations(requestParameters: PromptValuesApiAvailableLocationsRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).availableLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetAssignmentChangeGroupCostCentersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getAssignmentChangeGroupCostCenters(requestParameters: PromptValuesApiGetAssignmentChangeGroupCostCentersRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getAssignmentChangeGroupCostCenters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetAssignmentTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getAssignmentTypes(requestParameters: PromptValuesApiGetAssignmentTypesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getAssignmentTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetCompanyInsiderTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getCompanyInsiderTypes(requestParameters: PromptValuesApiGetCompanyInsiderTypesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getCompanyInsiderTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetContingentWorkerTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getContingentWorkerTypes(requestParameters: PromptValuesApiGetContingentWorkerTypesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getContingentWorkerTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetCurrencyInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getCurrencyInstances(requestParameters: PromptValuesApiGetCurrencyInstancesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getCurrencyInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetEmployeeTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getEmployeeTypes(requestParameters: PromptValuesApiGetEmployeeTypesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getEmployeeTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetGiftInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getGiftInstances(requestParameters: PromptValuesApiGetGiftInstancesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getGiftInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetGrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getGrants(requestParameters: PromptValuesApiGetGrantsRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getGrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances(requestParameters: PromptValuesApiGetInstancesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_1(requestParameters: PromptValuesApiGetInstances0Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_2(requestParameters: PromptValuesApiGetInstances1Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances10Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_3(requestParameters: PromptValuesApiGetInstances10Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances11Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_4(requestParameters: PromptValuesApiGetInstances11Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances12Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_5(requestParameters: PromptValuesApiGetInstances12Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances13Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_6(requestParameters: PromptValuesApiGetInstances13Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_6(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances14Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_7(requestParameters: PromptValuesApiGetInstances14Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_7(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances15Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_8(requestParameters: PromptValuesApiGetInstances15Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_8(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances16Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_9(requestParameters: PromptValuesApiGetInstances16Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_9(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances17Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_10(requestParameters: PromptValuesApiGetInstances17Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_10(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances18Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_11(requestParameters: PromptValuesApiGetInstances18Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_11(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances19Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_12(requestParameters: PromptValuesApiGetInstances19Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_12(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_13(requestParameters: PromptValuesApiGetInstances2Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_13(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_14(requestParameters: PromptValuesApiGetInstances3Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_14(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_15(requestParameters: PromptValuesApiGetInstances4Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_15(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_16(requestParameters: PromptValuesApiGetInstances5Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_16(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_17(requestParameters: PromptValuesApiGetInstances6Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_17(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances7Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_18(requestParameters: PromptValuesApiGetInstances7Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_18(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances8Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_19(requestParameters: PromptValuesApiGetInstances8Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_19(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetInstances9Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getInstances_20(requestParameters: PromptValuesApiGetInstances9Request = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getInstances_20(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getOptions(requestParameters: PromptValuesApiGetOptionsRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetProposedPositionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getProposedPositions(requestParameters: PromptValuesApiGetProposedPositionsRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getProposedPositions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetSupervisoryOrgValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getSupervisoryOrgValues(requestParameters: PromptValuesApiGetSupervisoryOrgValuesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getSupervisoryOrgValues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetTimeTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getTimeTypes(requestParameters: PromptValuesApiGetTimeTypesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getTimeTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetWorkerTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getWorkerTypes(requestParameters: PromptValuesApiGetWorkerTypesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getWorkerTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @param {PromptValuesApiGetWorkspaceInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptValuesApiGenerated
     */
    public getWorkspaceInstances(requestParameters: PromptValuesApiGetWorkspaceInstancesRequest = {}, options?: AxiosRequestConfig) {
        return PromptValuesApiFp(this.configuration).getWorkspaceInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
