/* tslint:disable */
/* eslint-disable */
/*
staffing

The Staffing REST APIs enable you to get and manage staffing information, such as jobs, job families, job profiles, supervisory organizations, worker check-ins, and job changes. The Staffing service also includes the /workers resource to access staffing information for non-terminated workers.



Related Information:
- Administrator Guide: Setup Considerations: Job Changes

The version of the OpenAPI document: v6


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessProcessParameters23782ad3f54110002073aab65def00fb } from '../models';
// @ts-ignore
import { BusinessUnit5aabf8e28cb310002520b2aabc470366 } from '../models';
// @ts-ignore
import { ChangeOrganizationAssignmentDefaultRepresentationDb2f38bfb555100012de1eb17c2f00ff } from '../models';
// @ts-ignore
import { Comments7d98fd55aeee100022968e52a1b31c60 } from '../models';
// @ts-ignore
import { Company56fe0dd0eca1100019cfe097d26a03f2 } from '../models';
// @ts-ignore
import { CostCenter5aabf8e28cb3100010a999f40b07024f } from '../models';
// @ts-ignore
import { CustomOrganizationDetails3950e273020a100017857926d35d369c } from '../models';
// @ts-ignore
import { ERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { EventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1 } from '../models';
// @ts-ignore
import { FundA18edb56aca0100014a4a0b27352045c } from '../models';
// @ts-ignore
import { GiftA18edb56aca0100014a4a0a9f876045b } from '../models';
// @ts-ignore
import { GrantA18edb56aca0100014a4a0bcf25c045e } from '../models';
// @ts-ignore
import { MassActionHeaderCf97466f96d910002bd32afbf0000001 } from '../models';
// @ts-ignore
import { MassActionWorksheet31485c9a93c0100007276cf4e5640000 } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365 } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354 } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetBusinessUnitResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetCommentResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetCompanyResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetCostCenterResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetCostingOrganizationsResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetCustomOrganizationsResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetRegionResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesGetStartDetailsResponse } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000 } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373 } from '../models';
// @ts-ignore
import { OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b } from '../models';
// @ts-ignore
import { Position827372de4457100019c0e9c5977d0000 } from '../models';
// @ts-ignore
import { PositionCf97466f96d9100029bffcf91c120001 } from '../models';
// @ts-ignore
import { ProgramA18edb56aca0100014a4a0b7ddf7045d } from '../models';
// @ts-ignore
import { RegionA18edb56aca0100006997ec7e07d0374 } from '../models';
// @ts-ignore
import { SupervisoryOrganization827372de445710001cfe36968a480000 } from '../models';
// @ts-ignore
import { VALIDATIONERRORMODELREFERENCE } from '../models';
// @ts-ignore
import { Worker90009f2bfc4910001b166d44a72c0727 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrganizationAssignmentChangesApi - axios parameter creator
 * @export
 */
export const OrganizationAssignmentChangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new change organization assignment event for a specific filled or unfilled position, which returns a new change organization assignment ID. Specify the new ID in subsequent requests that update or get information about the change organization assignment event.  In the request body, specify at least this required field: date, job {id}.\"  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Creates a new change organization assignment event for a specific filled or unfilled position.
         * @param {OrganizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000} organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChangeEvent: async (organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000: OrganizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000' is not null or undefined
            assertParamExists('createChangeEvent', 'organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000', organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000)
            const localVarPath = `/organizationAssignmentChanges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a business unit for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Retrieves a business unit for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessUnit: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getBusinessUnit', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getBusinessUnit', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/businessUnit/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/businessUnit/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a business unit for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Retrieves a business unit for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessUnit_1: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getBusinessUnit_1', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/businessUnit`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/businessUnit',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Retrieves the comment information for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getComment', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/comment`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/comment',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Retrieves the comment information for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentInfo: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCommentInfo', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCommentInfo', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/comment/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/comment/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a company for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Retrieves a company for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCompany', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/company`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/company',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Retrieves a company for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCompanyById', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCompanyById', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/company/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/company/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Retrieves a cost center for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostCenter: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCostCenter', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCostCenter', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/costCenter/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/costCenter/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a cost center for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Retrieves a cost center for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostCenter_2: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCostCenter_2', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/costCenter`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/costCenter',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Retrieves the costing organizations for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostingOrganizations: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCostingOrganizations', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCostingOrganizations', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/costing/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/costing/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Retrieves the costing organizations for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostingOrganizations_3: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCostingOrganizations_3', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/costing`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/costing',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Retrieves the custom organizations for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomOrganizations: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCustomOrganizations', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getCustomOrganizations', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/customOrganizations/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/customOrganizations/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Retrieves the custom organizations for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomOrganizations_4: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getCustomOrganizations_4', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/customOrganizations`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/customOrganizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about an organization assignment change event with the specified ID.  Secured by: Change Organization Assignment (REST), Staffing Organizations: Business Unit, Staffing Organizations: Company, Staffing Organizations: Cost Center, Staffing Organizations: Custom Organization, Staffing Organizations: Grant, Fund, Program, Gift, Staffing Organizations: Header, Staffing Organizations: Region  Scope: Organizations and Roles, Staffing
         * @summary Retrieves a single organization assignment change event instance.
         * @param {string} iD The Workday ID of the resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (iD: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getInstance', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a region for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Retrieves a region for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegion: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getRegion', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/region`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/region',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a region for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Retrieves a region for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionById: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getRegionById', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getRegionById', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/region/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/region/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Retrieves the start details for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails: async (iD: string, subresourceID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStartDetails', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('getStartDetails', 'subresourceID', subresourceID)
            const localVarPath = `/organizationAssignmentChanges/{ID}/startDetails/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/startDetails/{subresourceID}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Retrieves the start details for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {number} [limit] The maximum number of objects in a single response. The default is 20. The maximum is 100.
         * @param {number} [offset] The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails_5: async (iD: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('getStartDetails_5', 'iD', iD)
            const localVarPath = `/organizationAssignmentChanges/{ID}/startDetails`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/startDetails',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/company/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the company.   To retrieve a companies ID, call the GET /values/organizationAssignmentChangesGroup/companies prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the companies by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the companies by active organization based on the current date.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Partially updates the company for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354} organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCompany: async (iD: string, subresourceID: string, organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354: OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('partiallyUpdateCompany', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('partiallyUpdateCompany', 'subresourceID', subresourceID)
            // verify required parameter 'organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354' is not null or undefined
            assertParamExists('partiallyUpdateCompany', 'organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354', organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354)
            const localVarPath = `/organizationAssignmentChanges/{ID}/company/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/company/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costing/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the grant, program, gift, or fund you want to update.  To retrieve a grants ID, call the GET /values/organizationAssignmentChangesGroup/grants prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the grants by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the grants by active organization based on the current date.   To retrieve a funds ID, call the GET /values/organizationAssignmentChangesGroup/funds prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the funds by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the funds by active organization based on the current date.   To retrieve a programs ID, call the GET /values/organizationAssignmentChangesGroup/programs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the programs by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the programs by active organization based on the current date.   To retrieve a gifts ID, call the GET /values/organizationAssignmentChangesGroup/gifts prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the gifts by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the gifts by active organization based on the current date.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Partially updates the costing organization options for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a} organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCostingOptions: async (iD: string, subresourceID: string, organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a: OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('partiallyUpdateCostingOptions', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('partiallyUpdateCostingOptions', 'subresourceID', subresourceID)
            // verify required parameter 'organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a' is not null or undefined
            assertParamExists('partiallyUpdateCostingOptions', 'organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a', organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a)
            const localVarPath = `/organizationAssignmentChanges/{ID}/costing/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/costing/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the start details for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the effective date for the event.   You can call GET /organizationAssignmentChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   You can only update the date field once the event is initiated. These fields are read-only: worker, supervisoryOrganization, and position.  The same Workday UI validations apply with this PATCH method.   The updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Partially updates the start details for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b} organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateStartDetails: async (iD: string, subresourceID: string, organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b: OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('partiallyUpdateStartDetails', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('partiallyUpdateStartDetails', 'subresourceID', subresourceID)
            // verify required parameter 'organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b' is not null or undefined
            assertParamExists('partiallyUpdateStartDetails', 'organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b', organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b)
            const localVarPath = `/organizationAssignmentChanges/{ID}/startDetails/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/startDetails/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits the organization assignment change event for the specified ID, and initiates the Change Organization Assignment business process.  Submitting this request with an empty request body { } is equivalent to clicking the Submit button on the Change Organization Assgingment task in Workday.  For the equivalent of clicking the Save For Later button, specify the Save for Later Workday ID, \"\"d9e41a8c446c11de98360015c5e6daf6\"\", in the status{id} request field.   Example: { \"\"status\"\": {     \"\"id\"\": \"\"d9e41a8c446c11de98360015c5e6daf6\"\"   } }  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Submits the organization changes request for the specified ID, and initiates the Change Organization Assignment business process.
         * @param {string} iD The Workday ID of the resource.
         * @param {EventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1} eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitChangeRequest: async (iD: string, eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1: EventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('submitChangeRequest', 'iD', iD)
            // verify required parameter 'eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1' is not null or undefined
            assertParamExists('submitChangeRequest', 'eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1', eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1)
            const localVarPath = `/organizationAssignmentChanges/{ID}/submit`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/submit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the business unit option for the specified change organization assignment ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/businessUnit/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the business unit.   To retrieve a businessUnit ID, call the GET /values/organizationAssignmentChangesGroup/businessUnit prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the business units by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the business units by active organization based on the current date.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Partially updates the business unit for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365} organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessUnit: async (iD: string, subresourceID: string, organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365: OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateBusinessUnit', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateBusinessUnit', 'subresourceID', subresourceID)
            // verify required parameter 'organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365' is not null or undefined
            assertParamExists('updateBusinessUnit', 'organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365', organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365)
            const localVarPath = `/organizationAssignmentChanges/{ID}/businessUnit/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/businessUnit/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the comment for the organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method don\'t persist until you call POST/organizationAssignmentChanges/{ID}/submit.  To get the exising data to update, call GET/organizationAssignmentChanges/{ID}/comment/{subResourceID}.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Partially updates  the comment for the organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {Comments7d98fd55aeee100022968e52a1b31c60} comments7d98fd55aeee100022968e52a1b31c60 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment: async (iD: string, subresourceID: string, comments7d98fd55aeee100022968e52a1b31c60: Comments7d98fd55aeee100022968e52a1b31c60, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateComment', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateComment', 'subresourceID', subresourceID)
            // verify required parameter 'comments7d98fd55aeee100022968e52a1b31c60' is not null or undefined
            assertParamExists('updateComment', 'comments7d98fd55aeee100022968e52a1b31c60', comments7d98fd55aeee100022968e52a1b31c60)
            const localVarPath = `/organizationAssignmentChanges/{ID}/comment/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: comments7d98fd55aeee100022968e52a1b31c60,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/comment/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(comments7d98fd55aeee100022968e52a1b31c60, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costCenter/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the cost center.   To retrieve a costCenter ID, call the GET /values/organizationAssignmentChangesGroup/costCenters prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the cost centers by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the cost centers by active organization based on the current date.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Partially updates the cost center for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e} organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCostCenter: async (iD: string, subresourceID: string, organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e: OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateCostCenter', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateCostCenter', 'subresourceID', subresourceID)
            // verify required parameter 'organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e' is not null or undefined
            assertParamExists('updateCostCenter', 'organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e', organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e)
            const localVarPath = `/organizationAssignmentChanges/{ID}/costCenter/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/costCenter/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the custom organizations for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/customorganization/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the custom organization {id}  To retrieve a custom organization ID, call the GET /values/organizationAssignmentChangesGroup/customs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the custom organizations, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the active custom organizations based on the current date.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Partially updates the custom organizations for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f} organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomOrganizations: async (iD: string, subresourceID: string, organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f: OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateCustomOrganizations', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateCustomOrganizations', 'subresourceID', subresourceID)
            // verify required parameter 'organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f' is not null or undefined
            assertParamExists('updateCustomOrganizations', 'organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f', organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f)
            const localVarPath = `/organizationAssignmentChanges/{ID}/customOrganizations/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/customOrganizations/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates the region for the specified organization assignment change ID.   The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the Workday ID of the region.   To retrieve a regions ID, call the GET /values/organizationAssignmentChangesGroup/regions prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the regions by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the regions by active organization based on the current date.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Partially updates the region for the specified organization assignment change ID.
         * @param {string} iD The Workday ID of the resource.
         * @param {string} subresourceID The Workday ID of the subresource.
         * @param {OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373} organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegion: async (iD: string, subresourceID: string, organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373: OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            assertParamExists('updateRegion', 'iD', iD)
            // verify required parameter 'subresourceID' is not null or undefined
            assertParamExists('updateRegion', 'subresourceID', subresourceID)
            // verify required parameter 'organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373' is not null or undefined
            assertParamExists('updateRegion', 'organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373', organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373)
            const localVarPath = `/organizationAssignmentChanges/{ID}/region/{subresourceID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD !== undefined ? iD : `-ID-`)))
                .replace(`{${"subresourceID"}}`, encodeURIComponent(String(subresourceID !== undefined ? subresourceID : `-subresourceID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organizationAssignmentChanges/{ID}/region/{subresourceID}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationAssignmentChangesApi - functional programming interface
 * @export
 */
export const OrganizationAssignmentChangesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationAssignmentChangesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new change organization assignment event for a specific filled or unfilled position, which returns a new change organization assignment ID. Specify the new ID in subsequent requests that update or get information about the change organization assignment event.  In the request body, specify at least this required field: date, job {id}.\"  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Creates a new change organization assignment event for a specific filled or unfilled position.
         * @param {OrganizationAssignmentChangesApiCreateChangeEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChangeEvent(requestParameters: OrganizationAssignmentChangesApiCreateChangeEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000>> {
            const organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000: OrganizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChangeEvent(organizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a business unit for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Retrieves a business unit for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetBusinessUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessUnit(requestParameters: OrganizationAssignmentChangesApiGetBusinessUnitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessUnit(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a business unit for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Retrieves a business unit for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetBusinessUnit0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessUnit_1(requestParameters: OrganizationAssignmentChangesApiGetBusinessUnit0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetBusinessUnitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessUnit_1(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Retrieves the comment information for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComment(requestParameters: OrganizationAssignmentChangesApiGetCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComment(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Retrieves the comment information for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCommentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommentInfo(requestParameters: OrganizationAssignmentChangesApiGetCommentInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentInfo(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a company for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Retrieves a company for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompany(requestParameters: OrganizationAssignmentChangesApiGetCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompany(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Retrieves a company for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCompanyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyById(requestParameters: OrganizationAssignmentChangesApiGetCompanyByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyById(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Retrieves a cost center for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostCenterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostCenter(requestParameters: OrganizationAssignmentChangesApiGetCostCenterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostCenter(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a cost center for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Retrieves a cost center for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostCenter0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostCenter_2(requestParameters: OrganizationAssignmentChangesApiGetCostCenter0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetCostCenterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostCenter_2(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Retrieves the costing organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostingOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostingOrganizations(requestParameters: OrganizationAssignmentChangesApiGetCostingOrganizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostingOrganizations(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Retrieves the costing organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostingOrganizations0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostingOrganizations_3(requestParameters: OrganizationAssignmentChangesApiGetCostingOrganizations0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetCostingOrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostingOrganizations_3(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Retrieves the custom organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCustomOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomOrganizations(requestParameters: OrganizationAssignmentChangesApiGetCustomOrganizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomOrganizations(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Retrieves the custom organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCustomOrganizations0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomOrganizations_4(requestParameters: OrganizationAssignmentChangesApiGetCustomOrganizations0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetCustomOrganizationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomOrganizations_4(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves information about an organization assignment change event with the specified ID.  Secured by: Change Organization Assignment (REST), Staffing Organizations: Business Unit, Staffing Organizations: Company, Staffing Organizations: Cost Center, Staffing Organizations: Custom Organization, Staffing Organizations: Grant, Fund, Program, Gift, Staffing Organizations: Header, Staffing Organizations: Region  Scope: Organizations and Roles, Staffing
         * @summary Retrieves a single organization assignment change event instance.
         * @param {OrganizationAssignmentChangesApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(requestParameters: OrganizationAssignmentChangesApiGetInstanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeOrganizationAssignmentDefaultRepresentationDb2f38bfb555100012de1eb17c2f00ff>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInstance(requestParameters.iD, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a region for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Retrieves a region for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegion(requestParameters: OrganizationAssignmentChangesApiGetRegionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetRegionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegion(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a region for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Retrieves a region for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetRegionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegionById(requestParameters: OrganizationAssignmentChangesApiGetRegionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegionById(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Retrieves the start details for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStartDetails(requestParameters: OrganizationAssignmentChangesApiGetStartDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStartDetails(requestParameters.iD, requestParameters.subresourceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Retrieves the start details for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetStartDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStartDetails_5(requestParameters: OrganizationAssignmentChangesApiGetStartDetails0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesGetStartDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStartDetails_5(requestParameters.iD, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/company/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the company.   To retrieve a companies ID, call the GET /values/organizationAssignmentChangesGroup/companies prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the companies by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the companies by active organization based on the current date.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Partially updates the company for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdateCompany(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354>> {
            const organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354: OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdateCompany(requestParameters.iD, requestParameters.subresourceID, organizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costing/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the grant, program, gift, or fund you want to update.  To retrieve a grants ID, call the GET /values/organizationAssignmentChangesGroup/grants prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the grants by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the grants by active organization based on the current date.   To retrieve a funds ID, call the GET /values/organizationAssignmentChangesGroup/funds prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the funds by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the funds by active organization based on the current date.   To retrieve a programs ID, call the GET /values/organizationAssignmentChangesGroup/programs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the programs by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the programs by active organization based on the current date.   To retrieve a gifts ID, call the GET /values/organizationAssignmentChangesGroup/gifts prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the gifts by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the gifts by active organization based on the current date.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Partially updates the costing organization options for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdateCostingOptions(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a>> {
            const organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a: OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdateCostingOptions(requestParameters.iD, requestParameters.subresourceID, organizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the start details for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the effective date for the event.   You can call GET /organizationAssignmentChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   You can only update the date field once the event is initiated. These fields are read-only: worker, supervisoryOrganization, and position.  The same Workday UI validations apply with this PATCH method.   The updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Partially updates the start details for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partiallyUpdateStartDetails(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b>> {
            const organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b: OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.partiallyUpdateStartDetails(requestParameters.iD, requestParameters.subresourceID, organizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits the organization assignment change event for the specified ID, and initiates the Change Organization Assignment business process.  Submitting this request with an empty request body { } is equivalent to clicking the Submit button on the Change Organization Assgingment task in Workday.  For the equivalent of clicking the Save For Later button, specify the Save for Later Workday ID, \"\"d9e41a8c446c11de98360015c5e6daf6\"\", in the status{id} request field.   Example: { \"\"status\"\": {     \"\"id\"\": \"\"d9e41a8c446c11de98360015c5e6daf6\"\"   } }  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Submits the organization changes request for the specified ID, and initiates the Change Organization Assignment business process.
         * @param {OrganizationAssignmentChangesApiSubmitChangeRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitChangeRequest(requestParameters: OrganizationAssignmentChangesApiSubmitChangeRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1>> {
            const eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1: EventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitChangeRequest(requestParameters.iD, eventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the business unit option for the specified change organization assignment ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/businessUnit/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the business unit.   To retrieve a businessUnit ID, call the GET /values/organizationAssignmentChangesGroup/businessUnit prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the business units by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the business units by active organization based on the current date.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Partially updates the business unit for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateBusinessUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusinessUnit(requestParameters: OrganizationAssignmentChangesApiUpdateBusinessUnitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365>> {
            const organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365: OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessUnit(requestParameters.iD, requestParameters.subresourceID, organizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the comment for the organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method don\'t persist until you call POST/organizationAssignmentChanges/{ID}/submit.  To get the exising data to update, call GET/organizationAssignmentChanges/{ID}/comment/{subResourceID}.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Partially updates  the comment for the organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComment(requestParameters: OrganizationAssignmentChangesApiUpdateCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60>> {
            const comments7d98fd55aeee100022968e52a1b31c60: Comments7d98fd55aeee100022968e52a1b31c60 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComment(requestParameters.iD, requestParameters.subresourceID, comments7d98fd55aeee100022968e52a1b31c60, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costCenter/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the cost center.   To retrieve a costCenter ID, call the GET /values/organizationAssignmentChangesGroup/costCenters prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the cost centers by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the cost centers by active organization based on the current date.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Partially updates the cost center for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateCostCenterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCostCenter(requestParameters: OrganizationAssignmentChangesApiUpdateCostCenterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e>> {
            const organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e: OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCostCenter(requestParameters.iD, requestParameters.subresourceID, organizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the custom organizations for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/customorganization/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the custom organization {id}  To retrieve a custom organization ID, call the GET /values/organizationAssignmentChangesGroup/customs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the custom organizations, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the active custom organizations based on the current date.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Partially updates the custom organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomOrganizations(requestParameters: OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f>> {
            const organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f: OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomOrganizations(requestParameters.iD, requestParameters.subresourceID, organizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates the region for the specified organization assignment change ID.   The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the Workday ID of the region.   To retrieve a regions ID, call the GET /values/organizationAssignmentChangesGroup/regions prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the regions by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the regions by active organization based on the current date.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Partially updates the region for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegion(requestParameters: OrganizationAssignmentChangesApiUpdateRegionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373>> {
            const organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373: OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373 = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegion(requestParameters.iD, requestParameters.subresourceID, organizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationAssignmentChangesApi - factory interface
 * @export
 */
export const OrganizationAssignmentChangesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationAssignmentChangesApiFp(configuration)
    return {
        /**
         * Creates a new change organization assignment event for a specific filled or unfilled position, which returns a new change organization assignment ID. Specify the new ID in subsequent requests that update or get information about the change organization assignment event.  In the request body, specify at least this required field: date, job {id}.\"  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Creates a new change organization assignment event for a specific filled or unfilled position.
         * @param {OrganizationAssignmentChangesApiCreateChangeEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChangeEvent(requestParameters: OrganizationAssignmentChangesApiCreateChangeEventRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000> {
            return localVarFp.createChangeEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a business unit for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Retrieves a business unit for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetBusinessUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessUnit(requestParameters: OrganizationAssignmentChangesApiGetBusinessUnitRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365> {
            return localVarFp.getBusinessUnit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a business unit for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Retrieves a business unit for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetBusinessUnit0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessUnit_1(requestParameters: OrganizationAssignmentChangesApiGetBusinessUnit0Request, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetBusinessUnitResponse> {
            return localVarFp.getBusinessUnit_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Retrieves the comment information for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComment(requestParameters: OrganizationAssignmentChangesApiGetCommentRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetCommentResponse> {
            return localVarFp.getComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Retrieves the comment information for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCommentInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommentInfo(requestParameters: OrganizationAssignmentChangesApiGetCommentInfoRequest, options?: AxiosRequestConfig): AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60> {
            return localVarFp.getCommentInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a company for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Retrieves a company for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompany(requestParameters: OrganizationAssignmentChangesApiGetCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetCompanyResponse> {
            return localVarFp.getCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Retrieves a company for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCompanyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyById(requestParameters: OrganizationAssignmentChangesApiGetCompanyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354> {
            return localVarFp.getCompanyById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Retrieves a cost center for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostCenterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostCenter(requestParameters: OrganizationAssignmentChangesApiGetCostCenterRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e> {
            return localVarFp.getCostCenter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a cost center for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Retrieves a cost center for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostCenter0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostCenter_2(requestParameters: OrganizationAssignmentChangesApiGetCostCenter0Request, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetCostCenterResponse> {
            return localVarFp.getCostCenter_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Retrieves the costing organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostingOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostingOrganizations(requestParameters: OrganizationAssignmentChangesApiGetCostingOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a> {
            return localVarFp.getCostingOrganizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Retrieves the costing organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCostingOrganizations0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostingOrganizations_3(requestParameters: OrganizationAssignmentChangesApiGetCostingOrganizations0Request, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetCostingOrganizationsResponse> {
            return localVarFp.getCostingOrganizations_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Retrieves the custom organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCustomOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomOrganizations(requestParameters: OrganizationAssignmentChangesApiGetCustomOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f> {
            return localVarFp.getCustomOrganizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Retrieves the custom organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetCustomOrganizations0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomOrganizations_4(requestParameters: OrganizationAssignmentChangesApiGetCustomOrganizations0Request, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetCustomOrganizationsResponse> {
            return localVarFp.getCustomOrganizations_4(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves information about an organization assignment change event with the specified ID.  Secured by: Change Organization Assignment (REST), Staffing Organizations: Business Unit, Staffing Organizations: Company, Staffing Organizations: Cost Center, Staffing Organizations: Custom Organization, Staffing Organizations: Grant, Fund, Program, Gift, Staffing Organizations: Header, Staffing Organizations: Region  Scope: Organizations and Roles, Staffing
         * @summary Retrieves a single organization assignment change event instance.
         * @param {OrganizationAssignmentChangesApiGetInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(requestParameters: OrganizationAssignmentChangesApiGetInstanceRequest, options?: AxiosRequestConfig): AxiosPromise<ChangeOrganizationAssignmentDefaultRepresentationDb2f38bfb555100012de1eb17c2f00ff> {
            return localVarFp.getInstance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a region for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Retrieves a region for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegion(requestParameters: OrganizationAssignmentChangesApiGetRegionRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetRegionResponse> {
            return localVarFp.getRegion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a region for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Retrieves a region for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetRegionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegionById(requestParameters: OrganizationAssignmentChangesApiGetRegionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373> {
            return localVarFp.getRegionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Retrieves the start details for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails(requestParameters: OrganizationAssignmentChangesApiGetStartDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b> {
            return localVarFp.getStartDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Retrieves the start details for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiGetStartDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStartDetails_5(requestParameters: OrganizationAssignmentChangesApiGetStartDetails0Request, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesGetStartDetailsResponse> {
            return localVarFp.getStartDetails_5(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/company/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the company.   To retrieve a companies ID, call the GET /values/organizationAssignmentChangesGroup/companies prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the companies by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the companies by active organization based on the current date.  Secured by: Staffing Organizations: Company  Scope: Staffing
         * @summary Partially updates the company for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCompany(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354> {
            return localVarFp.partiallyUpdateCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costing/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the grant, program, gift, or fund you want to update.  To retrieve a grants ID, call the GET /values/organizationAssignmentChangesGroup/grants prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the grants by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the grants by active organization based on the current date.   To retrieve a funds ID, call the GET /values/organizationAssignmentChangesGroup/funds prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the funds by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the funds by active organization based on the current date.   To retrieve a programs ID, call the GET /values/organizationAssignmentChangesGroup/programs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the programs by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the programs by active organization based on the current date.   To retrieve a gifts ID, call the GET /values/organizationAssignmentChangesGroup/gifts prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the gifts by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the gifts by active organization based on the current date.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
         * @summary Partially updates the costing organization options for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateCostingOptions(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a> {
            return localVarFp.partiallyUpdateCostingOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the start details for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the effective date for the event.   You can call GET /organizationAssignmentChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   You can only update the date field once the event is initiated. These fields are read-only: worker, supervisoryOrganization, and position.  The same Workday UI validations apply with this PATCH method.   The updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  Secured by: Staffing Organizations: Header  Scope: Staffing
         * @summary Partially updates the start details for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partiallyUpdateStartDetails(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b> {
            return localVarFp.partiallyUpdateStartDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits the organization assignment change event for the specified ID, and initiates the Change Organization Assignment business process.  Submitting this request with an empty request body { } is equivalent to clicking the Submit button on the Change Organization Assgingment task in Workday.  For the equivalent of clicking the Save For Later button, specify the Save for Later Workday ID, \"\"d9e41a8c446c11de98360015c5e6daf6\"\", in the status{id} request field.   Example: { \"\"status\"\": {     \"\"id\"\": \"\"d9e41a8c446c11de98360015c5e6daf6\"\"   } }  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
         * @summary Submits the organization changes request for the specified ID, and initiates the Change Organization Assignment business process.
         * @param {OrganizationAssignmentChangesApiSubmitChangeRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitChangeRequest(requestParameters: OrganizationAssignmentChangesApiSubmitChangeRequestRequest, options?: AxiosRequestConfig): AxiosPromise<EventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1> {
            return localVarFp.submitChangeRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the business unit option for the specified change organization assignment ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/businessUnit/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the business unit.   To retrieve a businessUnit ID, call the GET /values/organizationAssignmentChangesGroup/businessUnit prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the business units by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the business units by active organization based on the current date.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
         * @summary Partially updates the business unit for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateBusinessUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusinessUnit(requestParameters: OrganizationAssignmentChangesApiUpdateBusinessUnitRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365> {
            return localVarFp.updateBusinessUnit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the comment for the organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method don\'t persist until you call POST/organizationAssignmentChanges/{ID}/submit.  To get the exising data to update, call GET/organizationAssignmentChanges/{ID}/comment/{subResourceID}.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
         * @summary Partially updates  the comment for the organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(requestParameters: OrganizationAssignmentChangesApiUpdateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<Comments7d98fd55aeee100022968e52a1b31c60> {
            return localVarFp.updateComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costCenter/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the cost center.   To retrieve a costCenter ID, call the GET /values/organizationAssignmentChangesGroup/costCenters prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the cost centers by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the cost centers by active organization based on the current date.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
         * @summary Partially updates the cost center for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateCostCenterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCostCenter(requestParameters: OrganizationAssignmentChangesApiUpdateCostCenterRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e> {
            return localVarFp.updateCostCenter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the custom organizations for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/customorganization/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the custom organization {id}  To retrieve a custom organization ID, call the GET /values/organizationAssignmentChangesGroup/customs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the custom organizations, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the active custom organizations based on the current date.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
         * @summary Partially updates the custom organizations for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomOrganizations(requestParameters: OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f> {
            return localVarFp.updateCustomOrganizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partially updates the region for the specified organization assignment change ID.   The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the Workday ID of the region.   To retrieve a regions ID, call the GET /values/organizationAssignmentChangesGroup/regions prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the regions by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the regions by active organization based on the current date.  Secured by: Staffing Organizations: Region  Scope: Staffing
         * @summary Partially updates the region for the specified organization assignment change ID.
         * @param {OrganizationAssignmentChangesApiUpdateRegionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegion(requestParameters: OrganizationAssignmentChangesApiUpdateRegionRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373> {
            return localVarFp.updateRegion(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createChangeEvent operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiCreateChangeEventRequest
 */
export type OrganizationAssignmentChangesApiCreateChangeEventRequest = {
    
} & OrganizationAssignmentChangesPostPositionCf97466f96d9100029bffcf91c120000

/**
 * Request parameters for getBusinessUnit operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetBusinessUnitRequest
 */
export type OrganizationAssignmentChangesApiGetBusinessUnitRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetBusinessUnit
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetBusinessUnit
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getBusinessUnit_1 operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetBusinessUnit0Request
 */
export type OrganizationAssignmentChangesApiGetBusinessUnit0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetBusinessUnit0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetBusinessUnit0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetBusinessUnit0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getComment operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCommentRequest
 */
export type OrganizationAssignmentChangesApiGetCommentRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetComment
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetComment
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetComment
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getCommentInfo operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCommentInfoRequest
 */
export type OrganizationAssignmentChangesApiGetCommentInfoRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCommentInfo
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCommentInfo
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCompany operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCompanyRequest
 */
export type OrganizationAssignmentChangesApiGetCompanyRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCompany
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCompany
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCompany
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getCompanyById operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCompanyByIdRequest
 */
export type OrganizationAssignmentChangesApiGetCompanyByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCompanyById
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCompanyById
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCostCenter operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCostCenterRequest
 */
export type OrganizationAssignmentChangesApiGetCostCenterRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCostCenter
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCostCenter
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCostCenter_2 operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCostCenter0Request
 */
export type OrganizationAssignmentChangesApiGetCostCenter0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCostCenter0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCostCenter0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCostCenter0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getCostingOrganizations operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCostingOrganizationsRequest
 */
export type OrganizationAssignmentChangesApiGetCostingOrganizationsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCostingOrganizations
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCostingOrganizations
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCostingOrganizations_3 operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCostingOrganizations0Request
 */
export type OrganizationAssignmentChangesApiGetCostingOrganizations0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCostingOrganizations0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCostingOrganizations0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCostingOrganizations0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getCustomOrganizations operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCustomOrganizationsRequest
 */
export type OrganizationAssignmentChangesApiGetCustomOrganizationsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCustomOrganizations
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCustomOrganizations
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getCustomOrganizations_4 operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetCustomOrganizations0Request
 */
export type OrganizationAssignmentChangesApiGetCustomOrganizations0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetCustomOrganizations0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCustomOrganizations0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetCustomOrganizations0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getInstance operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetInstanceRequest
 */
export type OrganizationAssignmentChangesApiGetInstanceRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetInstance
    */
    readonly iD: string
    
}

/**
 * Request parameters for getRegion operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetRegionRequest
 */
export type OrganizationAssignmentChangesApiGetRegionRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetRegion
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetRegion
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetRegion
    */
    readonly offset?: number
    
}

/**
 * Request parameters for getRegionById operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetRegionByIdRequest
 */
export type OrganizationAssignmentChangesApiGetRegionByIdRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetRegionById
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetRegionById
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getStartDetails operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetStartDetailsRequest
 */
export type OrganizationAssignmentChangesApiGetStartDetailsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetStartDetails
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetStartDetails
    */
    readonly subresourceID: string
    
}

/**
 * Request parameters for getStartDetails_5 operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiGetStartDetails0Request
 */
export type OrganizationAssignmentChangesApiGetStartDetails0Request = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiGetStartDetails0
    */
    readonly iD: string
    
    /**
    * The maximum number of objects in a single response. The default is 20. The maximum is 100.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetStartDetails0
    */
    readonly limit?: number
    
    /**
    * The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object.
    * @type {number}
    * @memberof OrganizationAssignmentChangesApiGetStartDetails0
    */
    readonly offset?: number
    
}

/**
 * Request parameters for partiallyUpdateCompany operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest
 */
export type OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiPartiallyUpdateCompany
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiPartiallyUpdateCompany
    */
    readonly subresourceID: string
    
} & OrganizationAssignmentChangesCompanyData652d516fdff41000086e0b9c96950354

/**
 * Request parameters for partiallyUpdateCostingOptions operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest
 */
export type OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiPartiallyUpdateCostingOptions
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiPartiallyUpdateCostingOptions
    */
    readonly subresourceID: string
    
} & OrganizationAssignmentChangesCostingDataA18edb56aca0100014a4a09dc57e045a

/**
 * Request parameters for partiallyUpdateStartDetails operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest
 */
export type OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiPartiallyUpdateStartDetails
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiPartiallyUpdateStartDetails
    */
    readonly subresourceID: string
    
} & OrganizationAssignmentChangesStartDetailsData90009f2bfc49100017b10cd07d19063b

/**
 * Request parameters for submitChangeRequest operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiSubmitChangeRequestRequest
 */
export type OrganizationAssignmentChangesApiSubmitChangeRequestRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiSubmitChangeRequest
    */
    readonly iD: string
    
} & EventStateOrganizationAssignmentF3e1ff305e2d100003327f7b7fa103f1

/**
 * Request parameters for updateBusinessUnit operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiUpdateBusinessUnitRequest
 */
export type OrganizationAssignmentChangesApiUpdateBusinessUnitRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateBusinessUnit
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateBusinessUnit
    */
    readonly subresourceID: string
    
} & OrganizationAssignmentChangesBusinessUnitData5aabf8e28cb310002520b2a2b31d0365

/**
 * Request parameters for updateComment operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiUpdateCommentRequest
 */
export type OrganizationAssignmentChangesApiUpdateCommentRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateComment
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateComment
    */
    readonly subresourceID: string
    
} & Comments7d98fd55aeee100022968e52a1b31c60

/**
 * Request parameters for updateCostCenter operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiUpdateCostCenterRequest
 */
export type OrganizationAssignmentChangesApiUpdateCostCenterRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateCostCenter
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateCostCenter
    */
    readonly subresourceID: string
    
} & OrganizationAssignmentChangesCostCenterData5aabf8e28cb3100010a999db2700024e

/**
 * Request parameters for updateCustomOrganizations operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest
 */
export type OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateCustomOrganizations
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateCustomOrganizations
    */
    readonly subresourceID: string
    
} & OrganizationAssignmentChangesCustomOrganizationDetailsData53cd2b632146100011e9bf4e7041551f

/**
 * Request parameters for updateRegion operation in OrganizationAssignmentChangesApi.
 * @export
 * @interface OrganizationAssignmentChangesApiUpdateRegionRequest
 */
export type OrganizationAssignmentChangesApiUpdateRegionRequest = {
    
    /**
    * The Workday ID of the resource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateRegion
    */
    readonly iD: string
    
    /**
    * The Workday ID of the subresource.
    * @type {string}
    * @memberof OrganizationAssignmentChangesApiUpdateRegion
    */
    readonly subresourceID: string
    
} & OrganizationAssignmentChangesRegionDataA18edb56aca0100006997e68e5780373

/**
 * OrganizationAssignmentChangesApiGenerated - object-oriented interface
 * @export
 * @class OrganizationAssignmentChangesApiGenerated
 * @extends {BaseAPI}
 */
export class OrganizationAssignmentChangesApiGenerated extends BaseAPI {
    /**
     * Creates a new change organization assignment event for a specific filled or unfilled position, which returns a new change organization assignment ID. Specify the new ID in subsequent requests that update or get information about the change organization assignment event.  In the request body, specify at least this required field: date, job {id}.\"  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
     * @summary Creates a new change organization assignment event for a specific filled or unfilled position.
     * @param {OrganizationAssignmentChangesApiCreateChangeEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public createChangeEvent(requestParameters: OrganizationAssignmentChangesApiCreateChangeEventRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).createChangeEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a business unit for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
     * @summary Retrieves a business unit for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetBusinessUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getBusinessUnit(requestParameters: OrganizationAssignmentChangesApiGetBusinessUnitRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getBusinessUnit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a business unit for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
     * @summary Retrieves a business unit for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetBusinessUnit0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getBusinessUnit_1(requestParameters: OrganizationAssignmentChangesApiGetBusinessUnit0Request, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getBusinessUnit_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
     * @summary Retrieves the comment information for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getComment(requestParameters: OrganizationAssignmentChangesApiGetCommentRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the comment information for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
     * @summary Retrieves the comment information for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCommentInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCommentInfo(requestParameters: OrganizationAssignmentChangesApiGetCommentInfoRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCommentInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a company for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
     * @summary Retrieves a company for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCompany(requestParameters: OrganizationAssignmentChangesApiGetCompanyRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Company  Scope: Staffing
     * @summary Retrieves a company for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCompanyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCompanyById(requestParameters: OrganizationAssignmentChangesApiGetCompanyByIdRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCompanyById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
     * @summary Retrieves a cost center for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCostCenterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCostCenter(requestParameters: OrganizationAssignmentChangesApiGetCostCenterRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCostCenter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a cost center for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
     * @summary Retrieves a cost center for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCostCenter0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCostCenter_2(requestParameters: OrganizationAssignmentChangesApiGetCostCenter0Request, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCostCenter_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
     * @summary Retrieves the costing organizations for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCostingOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCostingOrganizations(requestParameters: OrganizationAssignmentChangesApiGetCostingOrganizationsRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCostingOrganizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
     * @summary Retrieves the costing organizations for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCostingOrganizations0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCostingOrganizations_3(requestParameters: OrganizationAssignmentChangesApiGetCostingOrganizations0Request, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCostingOrganizations_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
     * @summary Retrieves the custom organizations for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCustomOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCustomOrganizations(requestParameters: OrganizationAssignmentChangesApiGetCustomOrganizationsRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCustomOrganizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the custom organizations for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
     * @summary Retrieves the custom organizations for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetCustomOrganizations0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getCustomOrganizations_4(requestParameters: OrganizationAssignmentChangesApiGetCustomOrganizations0Request, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getCustomOrganizations_4(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves information about an organization assignment change event with the specified ID.  Secured by: Change Organization Assignment (REST), Staffing Organizations: Business Unit, Staffing Organizations: Company, Staffing Organizations: Cost Center, Staffing Organizations: Custom Organization, Staffing Organizations: Grant, Fund, Program, Gift, Staffing Organizations: Header, Staffing Organizations: Region  Scope: Organizations and Roles, Staffing
     * @summary Retrieves a single organization assignment change event instance.
     * @param {OrganizationAssignmentChangesApiGetInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getInstance(requestParameters: OrganizationAssignmentChangesApiGetInstanceRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getInstance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a region for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
     * @summary Retrieves a region for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetRegionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getRegion(requestParameters: OrganizationAssignmentChangesApiGetRegionRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getRegion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a region for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Region  Scope: Staffing
     * @summary Retrieves a region for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetRegionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getRegionById(requestParameters: OrganizationAssignmentChangesApiGetRegionByIdRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getRegionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
     * @summary Retrieves the start details for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetStartDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getStartDetails(requestParameters: OrganizationAssignmentChangesApiGetStartDetailsRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getStartDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the start details for the specified organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  Secured by: Staffing Organizations: Header  Scope: Staffing
     * @summary Retrieves the start details for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiGetStartDetails0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public getStartDetails_5(requestParameters: OrganizationAssignmentChangesApiGetStartDetails0Request, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).getStartDetails_5(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the company for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/company/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the company.   To retrieve a companies ID, call the GET /values/organizationAssignmentChangesGroup/companies prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the companies by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the companies by active organization based on the current date.  Secured by: Staffing Organizations: Company  Scope: Staffing
     * @summary Partially updates the company for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public partiallyUpdateCompany(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateCompanyRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).partiallyUpdateCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the costing organizations for the specified organization assignment change ID. Costing organizations include: Grants, Funds, Programs, and Gifts. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costing/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the grant, program, gift, or fund you want to update.  To retrieve a grants ID, call the GET /values/organizationAssignmentChangesGroup/grants prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the grants by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the grants by active organization based on the current date.   To retrieve a funds ID, call the GET /values/organizationAssignmentChangesGroup/funds prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the funds by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the funds by active organization based on the current date.   To retrieve a programs ID, call the GET /values/organizationAssignmentChangesGroup/programs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the programs by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the programs by active organization based on the current date.   To retrieve a gifts ID, call the GET /values/organizationAssignmentChangesGroup/gifts prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the gifts by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the gifts by active organization based on the current date.  Secured by: Staffing Organizations: Grant, Fund, Program, Gift  Scope: Staffing
     * @summary Partially updates the costing organization options for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public partiallyUpdateCostingOptions(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateCostingOptionsRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).partiallyUpdateCostingOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the start details for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the effective date for the event.   You can call GET /organizationAssignmentChanges/{ID}/startDetails/{subResourceID} to get the existing data to update.   You can only update the date field once the event is initiated. These fields are read-only: worker, supervisoryOrganization, and position.  The same Workday UI validations apply with this PATCH method.   The updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  Secured by: Staffing Organizations: Header  Scope: Staffing
     * @summary Partially updates the start details for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public partiallyUpdateStartDetails(requestParameters: OrganizationAssignmentChangesApiPartiallyUpdateStartDetailsRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).partiallyUpdateStartDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits the organization assignment change event for the specified ID, and initiates the Change Organization Assignment business process.  Submitting this request with an empty request body { } is equivalent to clicking the Submit button on the Change Organization Assgingment task in Workday.  For the equivalent of clicking the Save For Later button, specify the Save for Later Workday ID, \"\"d9e41a8c446c11de98360015c5e6daf6\"\", in the status{id} request field.   Example: { \"\"status\"\": {     \"\"id\"\": \"\"d9e41a8c446c11de98360015c5e6daf6\"\"   } }  Secured by: Change Organization Assignment (REST)  Scope: Organizations and Roles
     * @summary Submits the organization changes request for the specified ID, and initiates the Change Organization Assignment business process.
     * @param {OrganizationAssignmentChangesApiSubmitChangeRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public submitChangeRequest(requestParameters: OrganizationAssignmentChangesApiSubmitChangeRequestRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).submitChangeRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the business unit option for the specified change organization assignment ID. The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/businessUnit/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the business unit.   To retrieve a businessUnit ID, call the GET /values/organizationAssignmentChangesGroup/businessUnit prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the business units by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the business units by active organization based on the current date.  Secured by: Staffing Organizations: Business Unit  Scope: Staffing
     * @summary Partially updates the business unit for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiUpdateBusinessUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public updateBusinessUnit(requestParameters: OrganizationAssignmentChangesApiUpdateBusinessUnitRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).updateBusinessUnit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the comment for the organization assignment change ID. The {subResourceID} path parameter must be the same as the {ID} value.  The data updates in this PATCH method don\'t persist until you call POST/organizationAssignmentChanges/{ID}/submit.  To get the exising data to update, call GET/organizationAssignmentChanges/{ID}/comment/{subResourceID}.  Secured by: Change Organization Assignment (REST), Change Organization Assignments for  \\~Worker\\~ (Mass Action)  Scope: Organizations and Roles
     * @summary Partially updates  the comment for the organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiUpdateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public updateComment(requestParameters: OrganizationAssignmentChangesApiUpdateCommentRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).updateComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the cost center for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/costCenter/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the cost center.   To retrieve a costCenter ID, call the GET /values/organizationAssignmentChangesGroup/costCenters prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the cost centers by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the cost centers by active organization based on the current date.  Secured by: Staffing Organizations: Cost Center  Scope: Staffing
     * @summary Partially updates the cost center for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiUpdateCostCenterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public updateCostCenter(requestParameters: OrganizationAssignmentChangesApiUpdateCostCenterRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).updateCostCenter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the custom organizations for the specified organization assignment change ID.  The {subResourceID} path parameter must be the same as the {ID} value.  You can call GET /organizationAssignmentChanges/{ID}/customorganization/{subResourceID} to get the existing data to update.   The same Workday UI validations apply with this PATCH method. The data updates in this PATCH method do not persist until you call POST /organizationAssignmentChanges/{ID}/submit.  In the request body, specify the Workday ID of the custom organization {id}  To retrieve a custom organization ID, call the GET /values/organizationAssignmentChangesGroup/customs prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the custom organizations, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the active custom organizations based on the current date.  Secured by: Staffing Organizations: Custom Organization  Scope: Staffing
     * @summary Partially updates the custom organizations for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public updateCustomOrganizations(requestParameters: OrganizationAssignmentChangesApiUpdateCustomOrganizationsRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).updateCustomOrganizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partially updates the region for the specified organization assignment change ID.   The {subResourceID} path parameter must be the same as the {ID} value.  In the request body, specify the Workday ID of the region.   To retrieve a regions ID, call the GET /values/organizationAssignmentChangesGroup/regions prompt endpoint, which takes the change organization assignment ID as the event query parameter. If you specify the event parameter, it returns HREF links to the regions by organization, as of the event\'s effective date. If you don\'t specify the event parameter, it returns HREF links to the regions by active organization based on the current date.  Secured by: Staffing Organizations: Region  Scope: Staffing
     * @summary Partially updates the region for the specified organization assignment change ID.
     * @param {OrganizationAssignmentChangesApiUpdateRegionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationAssignmentChangesApiGenerated
     */
    public updateRegion(requestParameters: OrganizationAssignmentChangesApiUpdateRegionRequest, options?: AxiosRequestConfig) {
        return OrganizationAssignmentChangesApiFp(this.configuration).updateRegion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
